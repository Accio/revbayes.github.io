####################
# Read in the data #
####################

this_gene = "fagus_ITS"

data = readDiscreteCharacterData("data/" + this_gene + ".nex")

# get some useful information about the data
taxa = data.taxa()
num_taxa = data.ntaxa()
num_branches = 2 * num_taxa - 3

# make a move index variable
mvi = 1

# name the analysis
name = this_gene + "_" + "RJ"

#########################################
# Define the prior on the tree topology #
#########################################

# We assume a uniform prior on topology.
topology ~ dnUniformTopology(taxa)
moves[mvi++] = mvNNI(topology, weight=10.0)
moves[mvi++] = mvSPR(topology, weight=10.0)

##########################################
# Define the prior on the branch lengths #
##########################################

for(i in 1:num_branches){
  br_lens[i] ~ dnExponential(10.0)
  moves[mvi++] = mvScale(br_lens[i], weight=1.0)
}
TL := sum(br_lens)

################################################
# Combine the tree topology and branch lengths #
################################################

phylogeny := treeAssembly(topology, br_lens)

############################################
# Define the substitution model parameters #
############################################

kappa ~ dnExp(1)
moves[mvi++] = mvScale(kappa, weight=5.0)

pi ~ dnDirichlet(v(1,1,1,1))
moves[mvi++] = mvBetaSimplex(pi, weight=5.0)

er ~ dnDirichlet(v(1,1,1,1,1,1))
moves[mvi++] = mvBetaSimplex(er, weight=5.0)

Q_JC  <- fnJC(4)
Q_K80 := fnK80(kappa)
Q_F81 := fnF81(pi)
Q_HKY := fnHKY(kappa, pi)
Q_GTR := fnGTR(er, pi)

Q_vec := v(Q_JC, Q_K80, Q_F81, Q_HKY, Q_GTR)

model_indicator ~ dnCategorical(simplex(1,1,1,1,1))
moves[mvi++] = mvRandomGeometricWalk(model_indicator, weight=10.0, tune=FALSE)

Q := Q_vec[model_indicator]

#################################################
# Define the model of among-site rate variation #
#################################################

alpha ~ dnReversibleJumpMixture(1e5, dnUniform(0,1E8), 0.5)
moves[mvi++] = mvRJSwitch(alpha, weight=10.0)
moves[mvi++] = mvScale(alpha, weight=10.0)

alpha_indicator := ifelse(alpha == 1e5, 0, 1)

site_rates := fnDiscretizeGamma(alpha, alpha, 4)

#################################
# Define the phyloCTMC model    #
# (AKA the likelihood function) #
#################################

seq ~ dnPhyloCTMC(tree=phylogeny, Q=Q, type="DNA", siteRates=site_rates)
seq.clamp(data) # attach the observed data

#########################
# Make the model object #
#########################

my_model = model(phylogeny)

#####################
# Make the monitors #
#####################

monitors[1] = mnModel(filename="output/" + name + "/posterior_samples.log",printgen=10, separator = TAB)
monitors[2] = mnFile(filename="output/" + name + "/tree_samples.trees",printgen=10, separator = TAB, phylogeny)
monitors[3] = mnScreen(printgen=100, model_indicator, alpha_indicator)

################
# Run the MCMC #
################

analysis = mcmc(my_model, monitors, moves)
analysis.burnin(generations=5000, tuningInterval=500)
analysis.operatorSummary()
analysis.run(generations=50000)

#########################################
# Read in the posterior sample of trees #
# and compute the MAP tree              #
#########################################

# start by reading in the tree trace
treetrace = readTreeTrace("output/" + name + "/tree_samples.trees", treetype="non-clock")
map_tree = mapTree(treetrace,"output/" + name + "/MAP_tree.tree")

# exit the program
q()
