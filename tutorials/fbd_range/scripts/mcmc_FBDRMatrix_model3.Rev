# read stratigraphic ranges
taxa = readTaxonData(file = "data/dinosaur_ranges.tsv")

# read fossil counts
k = readDataDelimitedFile(file = "data/dinosaur_fossil_counts.tsv", header = true, rownames = true)

# interval boundaries
timeline = v(100, 145, 201) - 66

mvi = 1

# specify FBDR model parameters
for(i in 1:(timeline.size()+1))
{

	mu[i] ~ dnExp(10)
	lambda[i] ~ dnExp(10)
	psi[i] ~ dnExp(10)
	
	div[i] := lambda[i] - mu[i]
	turnover[i] := mu[i]/lambda[i]

	moves[mvi++] = mvScale(mu[i], lambda = 0.01)
	moves[mvi++] = mvScale(mu[i], lambda = 0.1)
	moves[mvi++] = mvScale(mu[i], lambda = 1)

	moves[mvi++] = mvScale(lambda[i], lambda = 0.01)
	moves[mvi++] = mvScale(lambda[i], lambda = 0.1)
	moves[mvi++] = mvScale(lambda[i], lambda = 1)

	moves[mvi++] = mvScale(psi[i], lambda = 0.01)
	moves[mvi++] = mvScale(psi[i], lambda = 0.1)
	moves[mvi++] = mvScale(psi[i], lambda = 1)
}

rho=0

# model 3
bd ~ dnFBDRMatrix(taxa=taxa, lambda=lambda, mu=mu, psi=psi, rho=rho, timeline=timeline, k=k, binary=true)

moves[mvi++] = mvMatrixElementScale(bd, lambda = 0.01, weight=taxa.size())
moves[mvi++] = mvMatrixElementScale(bd, lambda = 0.1, weight=taxa.size())
moves[mvi++] = mvMatrixElementScale(bd, lambda = 1, weight=taxa.size())

moves[mvi++] = mvMatrixElementSlide(bd, delta = 0.01, weight=taxa.size())
moves[mvi++] = mvMatrixElementSlide(bd, delta = 0.1, weight=taxa.size())
moves[mvi++] = mvMatrixElementSlide(bd, delta = 1, weight=taxa.size())

mymodel = model(bd)

# add monitors
mni = 1

monitors[mni++] = mnScreen(lambda, mu, psi, printgen=100)
monitors[mni++] = mnModel(filename="output/model3.log",printgen=10)

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors, moveschedule="random")
mymcmc.run(30000)

q()
