- name: 'dnBernoulli'
  title: 'Bernoulli Distribution'
  aliases:
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'John Huelsenbeck'
  see_also: 'dnBinomial'
  domain: 'Natural'
  constructor:
    - usage: 'dnBernoulli(Probability<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBeta'
  title: 'Beta Distribution'
  aliases:
  description: 'The Beta probability distribution.'
  details: 'The Beta distribution is a probability distribution defined on 0 to 1.'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnDirichlet'
  domain: 'Probability'
  constructor:
    - usage: 'dnBeta(RealPos<any> alpha, RealPos<any> beta)'
      arguments:
        - label: 'alpha'
          description: 'The alpha shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'beta'
          description: 'The beta shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnBimodalLognormal'
  title: 'Bimodal Lognormal Distribution'
  aliases:
  description: 'A bimodal lognormal distribution, that is, with probability p a value is distributed according to the first lognormal distribution and with probability 1-p from the second lognormal distribution.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBimodalLognormal(mean1=-1,mean2=1,sd1=0.1,sd2=0.1,p=p)
    x.clamp( exp(1) )
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also:
    - 'dnBimodalNormal'
    - 'dnLognormal'
  domain: 'RealPos'
  constructor:
    - usage: 'dnBimodalLognormal(Real<any> mean1, Real<any> mean2, RealPos<any> sd1, RealPos<any> sd2, Probability<any> p)'
      arguments:
        - label: 'mean1'
          description: 'The mean (in log-space) of the first lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'mean2'
          description: 'The mean (in log-space) of the second lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd1'
          description: 'The standard deviation of the first lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sd2'
          description: 'The standard deviation of the secind lognormal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'The probability to belong to the first distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBimodalNormal'
  title: 'Bernoulli Distribution'
  aliases:
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBimodalNormal(mean1=-1,mean2=1,sd1=0.1,sd2=0.1,p=p)
    x.clamp( 1 )
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also:
    - 'dnBimodalLognormal'
    - 'dnNormal'
  domain: 'Real'
  constructor:
    - usage: 'dnBimodalNormal(Real<any> mean1, Real<any> mean2, RealPos<any> sd1, RealPos<any> sd2, Probability<any> p)'
      arguments:
        - label: 'mean1'
          description: 'Mean of the first normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'mean2'
          description: 'Mean of the second normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd1'
          description: 'Standard deviation of the first normal distributin.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sd2'
          description: 'Standard deviation of the second normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'Probability that the value belongs to the first normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnBinomial'
  title: 'Binomial Distribution'
  aliases: 'dnBinom'
  description: 'Binomial probability distribution of x successes in n trials.'
  details: 'The binomial probability distribution defines the number of success in n trials, where each trial has the same success probability p. The probability is given by (n choose x) p^(x) * (1-p)^(n-p)'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBinomial(n=10,p)
    x.clamp(8)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnBernoulli'
  domain: 'Natural'
  constructor:
    - usage: 'dnBinomial(Probability<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'Probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'n'
          description: 'Number of trials.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnBirthDeath'
  title:
  aliases: 'dnBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnBirthDeath(RealPos<any> lambda, RealPos<any> mu, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnBirthDeathBurstProcess'
  title:
  aliases: 'dnBDBP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnBirthDeathBurstProcess(RealPos<any> lambda, RealPos<any> mu, Probability<any> beta, RealPos<any> burstTime, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The piecewise-constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'beta'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'burstTime'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnCBDSP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCBDSP(RealPos<any> rootAge, RealPos<any> rootLambda, RealPos<any> rootMu, Distribution__RealPos<any> lambda, Distribution__RealPos<any> mu, RealPos<any> delta, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootLambda'
          description: 'The speciation rate at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootMu'
          description: 'The extinction rate at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The prior distribution for the speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__RealPos'
          default: 'NULL'
          options:
        - label: 'mu'
          description: 'The prior distribution for the extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__RealPos'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnCDBDP'
  title:
  aliases:
    - 'dnCDSSBDP'
    - 'dnCDFBDP'
    - 'dnBirthDeathMultiRate'
    - 'dnCDCladoBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCDBDP(RealPos<any> rootAge/originAge, CladogeneticSpeciationRateMatrix|RealPos[]<any> speciationRates/lambda/cladoEventMap, RealPos[]<any> extinctionRates/mu, RealPos[]<any> psi/phi, RateGenerator<any> Q, RealPos<any> delta, Simplex<any> pi, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, RealPos<any> nTimeSlices, String<any> simulateCondition {valid options: "startTime"|"numTips"|"tipStates"}, Natural<any> minNumLineages, Natural<any> maxNumLineages, Natural<any> exactNumLineages, RealPos<any> maxTime, Bool<any> pruneExtinctLineages)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'speciationRates/lambda/cladoEventMap'
          description: 'The vector of speciation rates (for anagenetic-only models), or the map of speciation rates to cladogenetic event types.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticSpeciationRateMatrix'
          default:
          options:
        - label: 'extinctionRates/mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'psi/phi'
          description: 'The vector of serial sampling rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'Q'
          description: 'The rate matrix of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate-factor of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'pi'
          description: 'State frequencies at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'nTimeSlices'
          description: 'The number of time slices for the numeric ODE.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '500'
          options:
        - label: 'simulateCondition'
          description: 'The conditions under which to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'startTime'
          options:
            - 'startTime'
            - 'numTips'
            - 'tipStates'
        - label: 'minNumLineages'
          description: 'The minimum number of lineages to simulate; applied under the startTime condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'maxNumLineages'
          description: 'The maximum number of lineages to simulate; applied under the startTime condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'exactNumLineages'
          description: 'The exact number of lineages to simulate; applied under the numTips condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'maxTime'
          description: 'Maximum time for lineages to coalesce when simulating; applied under the numTips and tipStates condition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1000'
          options:
        - label: 'pruneExtinctLineages'
          description: 'When simulating should extinct lineages be pruned off?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnCategorical'
  title: 'The Categorical Distribution'
  aliases: 'dnCat'
  description: 'The categorical distribution, sometimes referred to as the generalized Bernoulli distribution. It describes the probability of one of K different outcomes, labeled from 1 to K, with each outcome probability separately specified.'
  details:
    - 'The argument to the constructor is a simplex containing the probabilities of the outcomes. The outcomes are labeled from 1 to K, where K is the number of elements in the simplex. Outcome i has probability specified by component i in the simplex.'
    - 'A typical scenario where a categorical variable is used is in the definition of a variable drawn from a mixture. A vector of mixture components is set up first, and then a stochastic variable drawn from a categorical distribution is used as an index in a deterministic assignment that points to a component in the mixture. See example below.'
  example: |
    # Define a stochastic variable x that is drawn from
    # a categorical distribution with 4 categories, each
    # category having the same probability, then examine
    # the value of x.
    x ~ dnCat( simplex(1,1,1,1) )
    x
    
    # Draw 10 values from the distribution and place them
    # in a vector a, then examine a.
    for ( i in 1:10 ) {
        a[i] <- x
        x.redraw()
    }
    a
    
    # Use x in defining a deterministic variable y taking
    # on values from a mixture of RealPos values representing
    # rates from a discretized scaled gamma distribution
    # with four categories.
    shape ~ dnExp( 10.0 )
    rates := fnDiscretizeGamma( shape, shape, 4 )
    y := rates[x]
  authors: 'Fredrik Ronquist'
  see_also: 'dnBinomial'
  domain: 'Natural'
  constructor:
    - usage: 'dnCategorical(Simplex<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability for each category.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
  methods:
  references:
- name: 'dnCauchy'
  title: 'Cauchy Distribution'
  aliases: 'dnLorentz'
  description: 'Cauchy distribution with location equal to ‘location’ and scale equal to ‘scale’.'
  details:
    - 'The Cauchy distribution has density:'
    - 'f(x) = 1/(pi * scale) * 1/(1 + x-(location/scale)^2)'
  example: |
    # we simulate some obversations
    x <- rCauchy(n=10,location=0,scale=1)
    # let's see what the mean and the variance are.
    The mean will not converge with more samples, the Cauchy family has no moments.
    mean(x)
    var(x)
    sd(x)
  authors: 'Andrew Magee'
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnCauchy(Real<any> location, RealPos<any> scale)'
      arguments:
        - label: 'location'
          description: 'The location parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnChisq'
  title: 'Chi-Square Distribution'
  aliases:
  description: 'The chi-square probability distribution.'
  details:
  example: |
    # The most important use of the chi-square distribution
    # is arguable the quantile function.
    # You can access it the following way:
    df <- 10
    a := qchisq(0.025, df)
    a
  authors: 'Sebastian Hoehna'
  see_also:
  domain: 'RealPos'
  constructor:
    - usage: 'dnChisq(Natural<any> df)'
      arguments:
        - label: 'df'
          description: 'The degrees of freedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnCoalescent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCoalescent(RealPos<any> theta, String[]<any> names, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'The constant population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'names'
          description: 'The taxon names used when drawing a random tree.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints strictly enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnCoalescentSkyline'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCoalescentSkyline(RealPos[]<any> theta, RealPos[]<any> times, String<any> method {valid options: "events"|"uniform"|"specified"}, String[]<any> names, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'A vector of per interval population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'times'
          description: 'A vector of times for the intervals, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'method'
          description: 'The method how intervals are defined.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'uniform'
            - 'specified'
        - label: 'names'
          description: 'The names of the taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
        - label: 'constraints'
          description: 'The strictly enforced topology constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnCompleteBirthDeath'
  title:
  aliases: 'dnCompleteBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnCompleteBirthDeath(RealPos<any> rootAge/originAge/mrcaAge, RealPos<any> lambda, RealPos<any> mu, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge/mrcaAge'
          description: 'The start age of the process, either the root age, mrca age or the origin time.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedNodeAge'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedNodeAge(Distribution__TimeTree<any> treeDistribution, Clade[][]<any> constraints)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node Age constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[][]'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedNodeOrder'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedNodeOrder(Distribution__TimeTree<any> treeDistribution, RlRelativeNodeAgeConstraints<any> constraints)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node order constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RlRelativeNodeAgeConstraints'
          default:
          options:
  methods:
  references:
- name: 'dnConstrainedTopology'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnConstrainedTopology(Distribution__TimeTree<any> treeDistribution, Clade[]<any> constraints, TimeTree|TimeTree[]<any> backbone, Bool<any> inverse)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
        - label: 'backbone'
          description: 'The backbone topological constraints.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default: 'NULL'
          options:
        - label: 'inverse'
          description: 'Should the constraint be inverted?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnCppNormal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnCppNormal(RealPos<any> lambda, Real<any> mu, RealPos<any> sigma)'
      arguments:
        - label: 'lambda'
          description: 'The rate of the Poisson distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The mean of the normal distribution'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation of the normal distribution'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnDPP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real[]'
  constructor:
    - usage: 'dnDPP(RealPos<any> concentration, Distribution__Real<any> baseDistribution, Natural<any> numElements)'
      arguments:
        - label: 'concentration'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'baseDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
        - label: 'numElements'
          description: 'The number of elements drawn from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnDecomposedInvWishart'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'MatrixReal'
  constructor:
    - usage: 'dnDecomposedInvWishart(MatrixRealSymmetric<any> sigma, RealPos[]<any> diagonal, Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'sigma'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: '[ [ 0.0000 ] ]'
          options:
        - label: 'diagonal'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'df'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'kappa'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'dim'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: '0'
          options:
  methods:
  references:
- name: 'dnDirichlet'
  title: 'Dirichlet Distribution'
  aliases:
  description: 'Dirichlet probability distribution on a simplex.'
  details: 'The Dirichlet probability distribution is the generalization of the Beta distribution. A random variable from a Dirichlet distribution is a simplex, i.e., a vector of probabilities that sum to 1.'
  example: |
    # lets get a draw from a Dirichlet distribution
    a <- [1,1,1,1]   # we could also use rep(1,4)
    b ~ dnDirichlet(a)
    b
    # let check if b really sums to 1
    sum(b)
  authors: 'Sebastian Hoehna'
  see_also: 'simplex'
  domain: 'Simplex'
  constructor:
    - usage: 'dnDirichlet(RealPos[]<any> alpha)'
      arguments:
        - label: 'alpha'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
  methods:
  references:
- name: 'dnDiversityDependentYule'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnDiversityDependentYule(RealPos<any> lambda, Natural<any> capacity, RealPos<any> rootAge, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'lambda'
          description: 'The initial speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'capacity'
          description: 'The carrying capacity.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'rootAge'
          description: 'The time of the process since the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The names of the taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnDuplicationLoss'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given a constant effective population size. Requires an ultrametric species tree, a single effective population size (a single real positive), and taxa with species and individual names.'
  details:
    - 'The species tree must be ultrametric.'
    - 'The effective population size is constant across the species tree.'
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/" 
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees: 
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors: 'Sebastian Hoehna, Bastien Boussau, Dominik ...'
  see_also:
    - 'dnMultiSpeciesCoalescentUniformPrior'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnDuplicationLoss(TimeTree<any> individualTree, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, Taxon[]<any> taxa)'
      arguments:
        - label: 'individualTree'
          description: 'The individual tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'lambda'
          description: 'The duplication rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The loss rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
- name: 'dnEmpiricalSample'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree[]'
  constructor:
    - usage: 'dnEmpiricalSample(Distribution__TimeTree<any> baseDistribution)'
      arguments:
        - label: 'baseDistribution'
          description: 'The base distribution for the sampled values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
  methods:
  references:
- name: 'dnEmpiricalTree'
  title:
  aliases:
  description: 'Creates a distribution of trees from a trace of trees.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Create a distribution of trees
    tree ~ dnEmpiricalTree(tree_trace)
    
    # Add an MCMC move
    moves[1] = mvEmpiricalTree(tree)
  authors:
    - 'Will Freyman'
    - 'Sebastian Hoehna'
    - 'Will Pett'
  see_also:
    - 'mvEmpiricalTree'
    - 'treeTrace'
    - 'readTreeTrace'
  domain: 'Tree'
  constructor:
    - usage: 'dnEmpiricalTree(TraceTree<any> trace, Trace<any> density)'
      arguments:
        - label: 'trace'
          description: 'The trace of tree samples.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'TraceTree'
          default:
          options:
        - label: 'density'
          description: 'Optional trace of probability density values for each tree.'
          dag_type: '<any>'
          pass_by: 'reference'
          value_type: 'Trace'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnEpisodicBirthDeath'
  title:
  aliases: 'dnEBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnEpisodicBirthDeath(RealPos|RealPos[]<any> lambdaRates, RealPos|RealPos[]<any> lambdaTimes, RealPos|RealPos[]<any> muRates, RealPos|RealPos[]<any> muTimes, Probability<any> rho, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambdaRates'
          description: 'The piecewise-constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambdaTimes'
          description: 'The speciation rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '[ ]'
          options:
        - label: 'muRates'
          description: 'The piecewise-constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'muTimes'
          description: 'The constant extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '[ ]'
          options:
        - label: 'rho'
          description: 'The taxon sampling fraction(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnEvent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real[]'
  constructor:
    - usage: 'dnEvent(Distribution__Natural<any> eventDistribution, Distribution__Real<any> valueDistribution)'
      arguments:
        - label: 'eventDistribution'
          description: 'The prior on the number of events.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Natural'
          default:
          options:
        - label: 'valueDistribution'
          description: 'The base distribution for the per category values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
  methods:
  references:
- name: 'dnExponential'
  title:
  aliases: 'dnExp'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'RealPos'
  constructor:
    - usage: 'dnExponential(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate ( rate==1/mean) parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnFossilizedBirthDeathRange'
  title:
  aliases: 'dnFBDRP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnFossilizedBirthDeathRange(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability<any> rho, RealPos[]<any> timeline, Natural|Natural[]|Natural[][]<any> k, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa, Bool<any> binary, Bool<any> extended)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'psi'
          description: 'The fossil sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The extant sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'k'
          description: 'The fossil observation counts (total or [interval] or [interval][species]).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'binary'
          description: 'Treat fossil counts as binary presence/absence data?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'extended'
          description: 'Treat tip nodes as extinction events?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnFossilizedBirthDeathRangeMatrix'
  title:
  aliases: 'dnFBDRMatrix'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'MatrixReal'
  constructor:
    - usage: 'dnFossilizedBirthDeathRangeMatrix(RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability<any> rho, RealPos[]<any> timeline, Natural|Natural[]|Natural[][]<any> k, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa, Bool<any> binary)'
      arguments:
        - label: 'lambda'
          description: 'The speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'psi'
          description: 'The fossil sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The extant sampling fraction.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process (from oldest to youngest).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'k'
          description: 'The fossil observation counts (total or [interval] or [interval][species]).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxa with stratigraphic ranges used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'binary'
          description: 'Treat fossil counts as binary presence/absence data?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnGamma'
  title: 'Gamma Distribution'
  aliases:
  description: 'Gamma probability distribution for positive real numbers.'
  details: 'The gamma distribution is the probability of the sum of exponentially distributed variables. Thus, it provides a natural prior distribution for parameters that could be considered as sums of exponential variables.'
  example: |
    # lets simulate
    a <- rgamma(1000,shape=4,rate=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnGamma(shape=4,rate=1)
    x
  authors: 'Sebastian Hoehna'
  see_also: 'dnExponential'
  domain: 'RealPos'
  constructor:
    - usage: 'dnGamma(RealPos<any> shape, RealPos<any> rate)'
      arguments:
        - label: 'shape'
          description: 'The shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate parameter (rate = 1/scale).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnGeometric'
  title: 'Geometric Distribution'
  aliases: 'dnGeom'
  description: 'A geometric distribution defines a random variable on natural numbers. The geometric distribution describes the number of success until the first failure, with success probability p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnGeom(p)
    x.clamp(10)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", p)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also:
    - 'dnPoisson'
    - 'mvRandomIntegerWalk'
  domain: 'Natural'
  constructor:
    - usage: 'dnGeometric(Probability<any> p)'
      arguments:
        - label: 'p'
          description: 'The probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnGilbertGraph'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnGilbertGraph(RealPos<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'The probability that two vertices share an edge.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'n'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnHBDP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHBDP(RealPos<any> rootAge, Natural<any> rootState, RealPos[]<any> lambda, RealPos[]<any> mu, RealPos<any> delta, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, Bool<any> allowSameCategory, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rootState'
          description: 'The index of the rate category at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'lambda'
          description: 'The vector of speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'delta'
          description: 'The rate of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'survival'
          options:
            - 'time'
            - 'survival'
        - label: 'allowSameCategory'
          description: 'Do we allow shifts into the same category'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnHalfCauchy'
  title: 'half-Cauchy Distribution'
  aliases: 'dnCauchyPlus'
  description: 'Half-Cauchy distribution with location equal to ‘location’ and scale equal to ‘scale’.'
  details:
    - 'The half-Cauchy distribution has density:'
    - 'f(x) = 2/(pi * sigma) * 1/(1 + x-(location/scale)^2)'
  example: |
    # we simulate some obversations
    x <- rHalfCauchy(n=10,location=0,scale=1)
    # let's see what the minimum is (you could do the max too). If this is not ‘location’, we're in trouble!
    min(x)
    # let's also see what the mean and the variance are.
    The mean will not converge with more samples, the Cauchy family has no moments.
    mean(x)
    var(x)
    sd(x)
  authors: 'Andrew Magee'
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnHalfCauchy(Real<any> location, RealPos<any> scale)'
      arguments:
        - label: 'location'
          description: 'The location parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnHalfNormal'
  title: 'half-Normal Distribution'
  aliases:
  description: 'half-normal (gaussian) distribution with offset equal to ‘offset’ and standard deviation equal to ‘sd’.'
  details:
    - 'The half-normal distribution has density: f(x) = 2/(sqrt(2 pi) sigma) e^-((x - offset)^2/(2 sigma^2)) where offset is the offset of the distribution and sigma the standard deviation.'
    - 'f(x) = 2/(sqrt(2 pi) sigma) e^-((x - offset)^2/(2 sigma^2))'
    - 'where offset is the offset of the distribution and sigma the standard deviation.'
  example: |
    # we simulate some oversations
    x <- rhalfNormal(n=10,offset=0,sd=10)
    # let's see what the minimum is (you could do the max too)
    # the minimum should never be less than the offset
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors: 'Andrew Magee'
  see_also:
    - 'dnNormal'
    - 'dnLognormal'
  domain: 'Real'
  constructor:
    - usage: 'dnHalfNormal(Real<any> offset, RealPos<any> sd)'
      arguments:
        - label: 'offset'
          description: 'The offset parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnHeterochronousCoalescent'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHeterochronousCoalescent(RealPos<any> theta, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'The constant population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The topological constraints strictly enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnHeterochronousCoalescentSkyline'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnHeterochronousCoalescentSkyline(RealPos[]<any> theta, RealPos[]<any> times, String<any> method {valid options: "events"|"uniform"|"specified"}, Taxon[]<any> taxa, Clade[]<any> constraints)'
      arguments:
        - label: 'theta'
          description: 'A vector of per interval population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'times'
          description: 'A vector of times for the intervals, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'method'
          description: 'The method how intervals are defined.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'events'
          options:
            - 'events'
            - 'uniform'
            - 'specified'
        - label: 'taxa'
          description: 'The taxon names used for initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'constraints'
          description: 'The strictly enforced topology constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: '[ ]'
          options:
  methods:
  references:
- name: 'dnInverseGamma'
  title: 'inverseGamma Distribution'
  aliases:
  description: 'inverse-gamma probability distribution for positive real numbers.'
  details: 'The inverse Gamma distribution is the probability of the sum of exponentially distributed variables. Thus, it provides a natural prior distribution for parameters that could be considered as sums of exponential variables.'
  example: |
    # lets simulate
    a <- rinverseGamma(1000,shape=4,rate=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnInverseGamma(shape=4,rate=1)
    x
  authors: 'Sebastian Hoehna'
  see_also: 'dnExponential'
  domain: 'RealPos'
  constructor:
    - usage: 'dnInverseGamma(RealPos<any> shape, RealPos<any> rate)'
      arguments:
        - label: 'shape'
          description: 'The shape parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate parameter (rate = 1/scale).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnInverseWishart'
  title:
  aliases: 'dnInvWishart'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnInverseWishart(MatrixRealSymmetric<any> sigma, RealPos[]<any> diagonal, Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'sigma'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'diagonal'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'df'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'kappa'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'dim'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnLKJ'
  title: 'LKJ Distribution'
  aliases:
  description: 'The LKJ (Lewandowski-Kurowicka-Joe) distribution on correlation matrices with concentration parameter eta.'
  details:
    - 'The LKJ distribution is uniform over positive-definite correlation matrices when eta=1.'
    - 'The probability density of a correlation matrix under the LKJ distribution is:'
    - 'f(x) = det(x)^(eta - 1)'
  example: |
    
    # we simulate a correlation matrix.
    R <- rLKJ(n=1, eta=1, dim=5)
    
    # let's print the simulated correlation matrix
    R
  authors: 'Michael R. May'
  see_also: 'dnLKJPartial'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnLKJ(RealPos<any> eta, Natural<any> dim)'
      arguments:
        - label: 'eta'
          description: 'The parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
    - citation: 'Lewandowski D, D Kurowicka, H Joe (2009). Generating random correlation matrices based on vines and extended onion method. Journal of Multivariate Analysis, 100(9):1989-2001.'
      doi:
      url:
- name: 'dnLKJPartial'
  title: 'LKJ Distribution (for partial correlation matrices)'
  aliases:
  description: 'The LKJ (Lewandowski-Kurowicka-Joe) distribution (on the partial correlation matrix) with concentration parameter eta.'
  details:
    - 'The LKJPartial distribution is uniform over positive-definite correlation matrices when eta=1.'
    - 'The probability density of a correlation matrix under the LKJ distribution is:'
    - 'f(x) = det(x)^(eta - 1)'
  example: |
    
    # we simulate a partial correlation matrix.
    P <- rLKJPartial(n=1, eta=1, dim=5)
    
    # let's print the simulated partial correlation matrix
    P
  authors: 'Michael R. May'
  see_also: 'dnLKJ'
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnLKJPartial(RealPos<any> eta, Natural<any> dim)'
      arguments:
        - label: 'eta'
          description: 'The parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimensions of the correlation matrix.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
    - citation: 'Lewandowski D, D Kurowicka, H Joe (2009). Generating random correlation matrices based on vines and extended onion method. Journal of Multivariate Analysis, 100(9):1989-2001.'
      doi:
      url:
- name: 'dnLaplace'
  title: 'Laplace Distribution'
  aliases:
  description: 'Laplace distribution with mean equal to ‘mean’ and scale equal to ‘scale’.'
  details:
    - 'The Laplace distribution has density:'
    - 'f(x) = 1/(2 b) e^-(abs(x-mu)/b)'
    - 'where mu is the mean of the distribution and b the scale.'
  example:
  authors: 'Will Freyman'
  see_also:
    - 'dnExponential'
    - 'dnNormal'
  domain: 'Real'
  constructor:
    - usage: 'dnLaplace(Real<any> mean, RealPos<any> scale)'
      arguments:
        - label: 'mean'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'scale'
          description: 'The scale parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnLogExponential'
  title: 'Log-Exponential Distribution'
  aliases:
  description: 'A real number x has a log-Exponential distribution if y = exp(x) has Exponential distribution.'
  details:
    - 'The log-Exponential distribution is defined over real numbers. Saying that x is log-Exponential is equivalent to saying that y = exp(x) is Exponential. The log-Exponential distribution therefore expresses lack of information about the order of magnitude of a scale parameter:  if x has a log-Exponential distribution, then it has equal chance to be contained by any of the intervals of the form (10^k, 10^(k+1)) within the allowed range.'
    - 'The density is p(x) = ???, which can be seen by defining x = ln(y) where y has Exponential distribution and apply the change-of-variable formula.'
  example: |
    # a log-Exponential prior over the rate of change of a Brownian trait (or a Brownian relaxed clock)
    trueTree = readTrees("data/primates.tree")[1]
    log_sigma ~ dnLogExponential(lambda=1)
    sigma := exp(log_sigma)
    X ~ dnBrownian(trueTree,sigma)
    # ...
  authors: 'Sebastian Hoehna'
  see_also: 'dnExponential'
  domain: 'Real'
  constructor:
    - usage: 'dnLogExponential(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate of the exonential distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnLognormal'
  title:
  aliases: 'dnLnorm'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'RealPos'
  constructor:
    - usage: 'dnLognormal(Real<any> mean, RealPos<any> sd)'
      arguments:
        - label: 'mean'
          description: 'The mean in log-space (observed mean is exp(m)).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation in log-space.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnLoguniform'
  title: 'Log-Uniform Distribution'
  aliases:
  description: 'A strictly positive real number x has a log-uniform distribution over interval (min,max) if its logarithm y = ln(x) has uniform distribution over interval (ln(min),ln(max)).'
  details:
    - 'The log-uniform distribution is defined over strictly positive real numbers. Saying that x is log-uniform is equivalent to saying that y = ln(x) is uniform. The log-uniform distribution therefore expresses lack of information about the order of magnitude of a scale parameter:  if x has a log-uniform distribution, then it has equal chance to be contained by any of the intervals of the form (10^k, 10^(k+1)) within the allowed range.'
    - 'The density is p(x) = 1/x, which can be seen by defining x = exp(y) where y has uniform distribution and apply the change-of-variable formula.'
    - 'The log-uniform distribution is improper when defined over the entire positive real line. To always make it proper, in RevBayes, a min and a max should always be specified.'
  example: |
    # a log-uniform prior over the rate of change of a Brownian trait (or a Brownian relaxed clock)
    trueTree = readTrees("data/primates.tree")[1]
    sigma ~ dnLogUniform(min=0.001, max=1000)
    X ~ dnBrownian(trueTree,sigma)
    # ...
  authors: 'Nicolas Lartillot'
  see_also: 'dnUniform'
  domain: 'RealPos'
  constructor:
    - usage: 'dnLoguniform(RealPos<any> min, RealPos<any> max)'
      arguments:
        - label: 'min'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'max'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnMixture'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnMixture(Real[]<any> values, Simplex<any> probabilities)'
      arguments:
        - label: 'values'
          description: 'The potential values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'probabilities'
          description: 'The probabilitoes for each value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
  methods:
  references:
- name: 'dnMultiSpeciesCoalescent'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given a constant effective population size. Requires an ultrametric species tree, a single effective population size (a single real positive), and taxa with species and individual names.'
  details:
    - 'The species tree must be ultrametric.'
    - 'The effective population size is constant across the species tree.'
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/" 
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees: 
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors: 'Sebastian Hoehna, Bastien Boussau'
  see_also:
    - 'dnMultiSpeciesCoalescentUniformPrior'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescent(TimeTree<any> speciesTree, RealPos|RealPos[]<any> Ne, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'Ne'
          description: 'The effective population size(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
- name: 'dnMultiSpeciesCoalescentInverseGamma'
  title: 'Multispecies coalescent Distribution with inverse gamma prior on effective population sizes'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given effective population sizes. Requires an ultrametric species tree, parameters of an inverse gamma prior on effective population sizes, and taxa with species and individual names.'
  details:
    - 'The species tree must be ultrametric.'
    - 'Parameters of an inverse gamma prior on effective population sizes must be provided.'
    - 'This distribution uses a conjugate prior on effective population sizes.'
    - 'As a consequence, effective population sizes are integrated out and treated as nuisance parameters.'
    - 'If you are interested in reconstructing ancestral effective population sizes, use dnMultiSpeciesCoalescent.'
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/" 
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick constant parameters for the inverse gamma distribution:
    alpha <- 3
    beta <- 0.003
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescentInverseGamma(speciesTree=spTree, shape=alpha, rate=beta, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees: 
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors: 'Sebastian Hoehna, Bastien Boussau'
  see_also:
    - 'dnMultiSpeciesCoalescent'
    - 'dnMultiSpeciesCoalescentUniformPrior'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescentInverseGamma(TimeTree<any> speciesTree, RealPos<any> shape, RealPos<any> rate, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'shape'
          description: 'The shape of the inverse gamma prior distribution on the effective population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rate'
          description: 'The rate of the inverse gamma prior distribution on the effective population sizes.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: ' Algorithmic improvements to species delimitation and phylogeny estimation under the multispecies coalescent. Jones G.  Journal of Mathematical Biology. 2016.'
      doi: 'DOI: 10.1007/s00285-016-1034-0'
      url: 'http://www.indriid.com/2016/2016-06-01-STACEY.pdf'
- name: 'dnMultiSpeciesCoalescentUniformPrior'
  title: 'Multispecies coalescent Distribution'
  aliases:
  description: 'Multispecies coalescent distribution describing how gene trees can be generated from within a species tree given effective population sizes. Requires an ultrametric species tree, effective population size(s) (a single real positive or a vector of real positives), and taxa with species and individual names.'
  details:
    - 'The species tree must be ultrametric.'
    - 'Effective population sizes can be constant across the species tree, if a single real positive is provided, or branchwise, if a vector is provided.'
  example: |
    # We are going to save the trees we simulate in the folder simulatedTrees:
    dataFolder = "simulatedTrees/" 
    # Let’s simulate a species tree with 10 taxa, 2 gene trees, 3 alleles per species:
    n_species <- 10
    n_genes <- 2
    n_alleles <- 3
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i+"_"+j, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescentUniformPrior(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
      print(geneTrees[g])
    }
    # We can save the species tree and the gene trees: 
    write(spTree, filename=dataFolder+"speciesTree")
    # Saving the gene trees
    for (i in 1:(n_genes)) {
      write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
    }
  authors: 'Sebastian Hoehna, Bastien Boussau'
  see_also:
    - 'dnMultiSpeciesCoalescent'
    - 'dnMultiSpeciesCoalescentInverseGamma'
  domain: 'TimeTree'
  constructor:
    - usage: 'dnMultiSpeciesCoalescentUniformPrior(TimeTree<any> speciesTree, RealPos<any> max, Taxon[]<any> taxa)'
      arguments:
        - label: 'speciesTree'
          description: 'The species tree in which the gene trees evolve.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'max'
          description: 'The maximum effective population size.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
    - citation: 'Bayes Estimation of Species Divergence Times and Ancestral Population Sizes Using DNA Sequences From Multiple Loci. Bruce Rannala and Ziheng Yang. GENETICS August 1, 2003 vol. 164 no. 4 1645-1656.'
      doi:
      url: 'http://www.genetics.org/content/164/4/1645.short'
    - citation: 'Bayesian Inference of Species Trees from Multilocus Data. Heled and Drummond Mol. Biol Evol. 27 (3): 570-580, 2010.'
      doi: 'DOI: https://doi.org/10.1093/molbev/msp274'
      url: 'https://academic.oup.com/mbe/article/27/3/570/999753/Bayesian-Inference-of-Species-Trees-from'
- name: 'dnMultinomial'
  title: 'Multinomial Distribution'
  aliases:
  description: 'A multinomial distribution defines a probability distribution on a vector of natural numbers. It is understood as randomly picking n times from the k categories with replacement where each catefory has its own probability p[i].'
  details:
  example: |
    p <- simplex(1,1,1,1)
    x ~ dnMultinomial(10, p)
    y ~ dnDirichlet(x)
    y.clamp( simplex(1,2,3,4) )
    moves[1] = mvSlide(x, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnDirichlet'
  domain: 'Natural[]'
  constructor:
    - usage: 'dnMultinomial(Simplex<any> p, Natural<any> n)'
      arguments:
        - label: 'p'
          description: 'The simplex of probabilities for the categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default:
          options:
        - label: 'n'
          description: 'The number of draws.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnMultivariateNormal'
  title: 'Bernoulli Distribution'
  aliases:
  description: 'A multivariate normal distribution.'
  details:
  example:
  authors: 'Sebastian Hoehna'
  see_also: 'dnBinomial'
  domain: 'Real[]'
  constructor:
    - usage: 'dnMultivariateNormal(Real[]<any> mean, MatrixRealSymmetric<any> covariance, MatrixRealSymmetric<any> precision, RealPos<any> scale)'
      arguments:
        - label: 'mean'
          description: 'The vector of mean values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real[]'
          default:
          options:
        - label: 'covariance'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'precision'
          description: 'The precision matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default: 'NULL'
          options:
        - label: 'scale'
          description: 'The scaling factor of the variance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
    - name: 'clampAt'
      return_type: 'void'
      usage: 'clampAt(Natural<any> index, Real<any> value)'
      arguments:
        - label: 'index'
          description: 'The index of the value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'value'
          description: 'The observed value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default:
          options:
  references:
- name: 'dnNbinomial'
  title: 'Negative Binomial Distribution'
  aliases: 'dnNbinom'
  description: 'Negative binomial probability distribution of x successes before r failures.'
  details: 'The negative binomial probability distribution describes the number of successes before r failures, where the success probability is p. The probability is given by (x + r - 1 choose x) p^(x) * (1-p)^r'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnNegativeBinomial(r=10,p)
    x.clamp(8)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", x)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Walker Pett'
  see_also: 'dnBinomial'
  domain: 'Natural'
  constructor:
    - usage: 'dnNbinomial(Natural<any> r, Probability<any> p)'
      arguments:
        - label: 'r'
          description: 'Number of failures.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'p'
          description: 'Probability of success.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnNormal'
  title: 'Normal Distribution'
  aliases: 'dnNorm'
  description: 'Normal (gaussian) distribution with mean equal to ‘mean’ and standard deviation equal to ‘sd’.'
  details:
    - 'The normal distribution has density:'
    - 'f(x) = 1/(sqrt(2 pi) sigma) e^-((x - mu)^2/(2 sigma^2))'
    - 'where mu is the mean of the distribution and sigma the standard deviation.'
  example: |
    # we simulate some observations
    x <- rnorm(n=10,mean=5,sd=10)
    # let's see what the minimum is (you could do the max too)
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors: 'Sebastian Hoehna'
  see_also: 'dnLognormal'
  domain: 'Real'
  constructor:
    - usage: 'dnNormal(Real<any> mean, RealPos<any> sd)'
      arguments:
        - label: 'mean'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'sd'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnOrnsteinUhlenbeck'
  title: 'Bernoulli Distribution'
  aliases: 'dnOU'
  description: 'A Bernoulli-distributed random variable takes the value 1 with probability p and the value 0 with probability 1-p.'
  details:
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", speciation)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnBinomial'
  domain: 'Real'
  constructor:
    - usage: 'dnOrnsteinUhlenbeck(Real<any> x0, Real<any> theta, RealPos<any> alpha, RealPos<any> sigma, RealPos<any> time)'
      arguments:
        - label: 'x0'
          description: 'The root parameter value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'theta'
          description: 'The location of the optimum parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'alpha'
          description: 'The attraction to the optimum parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sigma'
          description: 'The scaling parameter of the time.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'time'
          description: 'The duration of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnOutgroupBirthDeath'
  title:
  aliases: 'dnOutgroupBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnOutgroupBirthDeath(RealPos<any> lambda, RealPos<any> mu, Probability<any> rhoIngroup, Probability<any> rhoOutgroup, Taxon[]<any> taxaOutgroup, String<any> samplingStrategyOutgroup {valid options: "uniform"|"diversified"}, String<any> samplingStrategyIngroup {valid options: "uniform"|"diversified"}, RealPos<any> rootAge, String<any> samplingStrategy {valid options: "uniform"|"diversified"}, String<any> condition {valid options: "time"|"survival"|"nTaxa"}, Taxon[]<any> taxa, Clade[]<any> incompleteClades)'
      arguments:
        - label: 'lambda'
          description: 'The constant speciation rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The constant extinction rate.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rhoIngroup'
          description: 'The ingroup sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'rhoOutgroup'
          description: 'The outgroup sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'taxaOutgroup'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'samplingStrategyOutgroup'
          description: 'The sampling strategy of including outgroup taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'samplingStrategyIngroup'
          description: 'The sampling strategy of including ingroup taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'rootAge'
          description: 'The time of the process starting at the root, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'samplingStrategy'
          description: 'The sampling strategy of including taxa at the present.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'uniform'
          options:
            - 'uniform'
            - 'diversified'
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
            - 'nTaxa'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'incompleteClades'
          description: 'Vector of incompletely sampled clades with number of missing species.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
  methods:
  references:
- name: 'dnPhyloBrownian'
  title:
  aliases: 'dnPhyloBM'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real[]'
  constructor:
    - usage: 'dnPhyloBrownian(TimeTree<any> tree, RealPos<any> sigma, Real<any> drift)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the continuous character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The branch-length multiplier to scale the variance of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'drift'
          description: 'The drift parameter of the Brownian motion.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMVN'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianMVN(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos|RealPos[]<any> siteRates, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The rate of evolution along a branch.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate of evolution per site.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMultiSampleREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianMultiSampleREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos[]<any> withinSpeciesVariances, RealPos|RealPos[]<any> siteRates, Taxon[]<any> taxa, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'siteRates'
          description: 'The per site rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'nSites'
          description: 'The number of sites used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloBrownianMultiVariate'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real[][]'
  constructor:
    - usage: 'dnPhyloBrownianMultiVariate(TimeTree<any> tree, MatrixRealSymmetric<any> sigma)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloBrownianREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloBrownianREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, RealPos|RealPos[]<any> siteRates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The per site rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'nSites'
          description: 'The number of sites used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloCTMC'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMC(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, Simplex|Bool<any> siteMatrices, RealPos[]<any> siteRates, Simplex<any> siteRatesProbs, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"Codon"|"Pomo"|"Protein"|"Standard"|"NaturalNumbers"|"Binary"|"Restriction"}, Bool<any> treatAmbiguousAsGap, String<any> coding, Bool<any> storeInternalNodes, Bool<any> gapMatchClamped)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global, branch-specific or site-mixture rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteMatrices'
          description: 'Simplex of site matrix mixture probabilities. Treats Q as vector of site mixture categories instead of branch-specific matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'siteRatesProbs'
          description: 'The probability weights of rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'Codon'
            - 'Pomo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Binary'
            - 'Restriction'
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
        - label: 'storeInternalNodes'
          description: 'Should we store internal node states in the character matrix?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'gapMatchClamped'
          description: 'Should we set the simulated character to be gap or missing if the corresponding character in the clamped matrix is gap or missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCClado'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCClado(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, CladogeneticProbabilityMatrix|CladogeneticProbabilityMatrix[]<deterministic> cladoProbs, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"Pomo"|"Protein"|"Standard"|"NaturalNumbers"}, Bool<any> treatAmbiguousAsGap, Bool<any> storeInternalNodes, Bool<any> gapMatchClamped)'
      arguments:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'cladoProbs'
          description:
          dag_type: '<deterministic>'
          pass_by: 'const reference'
          value_type: 'CladogeneticProbabilityMatrix'
          default:
          options:
        - label: 'rootFrequencies'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'NaturalNumbers'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'Pomo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
        - label: 'treatAmbiguousAsGap'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'storeInternalNodes'
          description: 'Should we store internal node states in the character matrix?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'gapMatchClamped'
          description: 'Should we set the simulated character to gap or missing if the corresponding character in the clamped matrix is gap or missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDASequence'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDASequence(Tree<any> tree, RateGeneratorSequence|RateGeneratorSequence[]<any> Q, CladogeneticProbabilityMatrix<any> cladoProbs, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"Pomo"|"Protein"|"Standard"|"NaturalNumbers"|"Restriction"}, Bool<any> treatAmbiguousAsGap, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGeneratorSequence'
          default:
          options:
        - label: 'cladoProbs'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticProbabilityMatrix'
          default: 'NULL'
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'Pomo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Restriction'
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDASiteIID'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDASiteIID(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Probability<any> pInv, Natural<any> nSites, String<any> type {valid options: "DNA"|"RNA"|"AA"|"Pomo"|"Protein"|"Standard"|"NaturalNumbers"|"Restriction"}, Bool<any> treatAmbiguousAsGap, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default:
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'pInv'
          description: 'The probability of a site being invariant.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'DNA'
          options:
            - 'DNA'
            - 'RNA'
            - 'AA'
            - 'Pomo'
            - 'Protein'
            - 'Standard'
            - 'NaturalNumbers'
            - 'Restriction'
        - label: 'treatAmbiguousAsGap'
          description: 'Should we treat ambiguous characters as gaps/missing?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'all'
          options:
  methods:
  references:
- name: 'dnPhyloCTMCDollo'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'AbstractHomologousDiscreteCharacterData'
  constructor:
    - usage: 'dnPhyloCTMCDollo(Tree<any> tree, RateGenerator|RateGenerator[]<any> Q, RealPos<any> deathRate, Simplex<any> rootFrequencies, RealPos|RealPos[]<any> branchRates, RealPos[]<any> siteRates, Natural<any> nSites, String<any> type {valid options: "Standard"|"Binary"|"Restriction"}, Bool<any> normalize, String<any> coding)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'Q'
          description: 'The global or branch-specific rate matrices.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator'
          default: 'NULL'
          options:
        - label: 'deathRate'
          description: 'The Dollo character death rate'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootFrequencies'
          description: 'The root specific frequencies of the characters, if applicable.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'branchRates'
          description: 'The global or branch-specific rate multipliers.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'siteRates'
          description: 'The rate categories for the sites.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: '[ ]'
          options:
        - label: 'nSites'
          description: 'The number of sites, used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'type'
          description: 'The data type, used for simulation and initialization.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'Standard'
          options:
            - 'Standard'
            - 'Binary'
            - 'Restriction'
        - label: 'normalize'
          description: 'Should we normalize the Dollo substitution matrices?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'coding'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'noabsencesites'
          options:
  methods:
  references:
- name: 'dnPhyloDistanceGamma'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'DistanceMatrix'
  constructor:
    - usage: 'dnPhyloDistanceGamma(Tree<any> tree, DistanceMatrix<any> distanceMatrix, DistanceMatrix<any> varianceMatrix, String[]<any> names)'
      arguments:
        - label: 'tree'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'distanceMatrix'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DistanceMatrix'
          default:
          options:
        - label: 'varianceMatrix'
          description:
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'DistanceMatrix'
          default:
          options:
        - label: 'names'
          description:
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultiSampleOrnsteinUhlenbeck'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultiSampleOrnsteinUhlenbeck(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, RealPos[]<any> withinSpeciesVariances, Real|Real[]<any> rootStates, Natural<any> nSites, Taxon[]<any> taxa)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultiSampleOrnsteinUhlenbeckREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultiSampleOrnsteinUhlenbeckREML(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, RealPos[]<any> withinSpeciesVariances, Real|Real[]<any> rootStates, Natural<any> nSites, Taxon[]<any> taxa)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'withinSpeciesVariances'
          description: 'The per species within-species variances.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'taxa'
          description: 'The vector of taxa which have species and individual names.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnPhyloMultivariateBrownianREML'
  title: 'Phylogenetic Multivariate Brownian Motion'
  aliases:
  description: 'Multivariate Brownian motion over a phylogeny with variance-covariance matrix rateMatrix.'
  details:
  example: |
    
    # generate a tree and variance-covariance matrix.
    psi ~ dnUniformTimeTree(1, [taxon("A"),taxon("B"),taxon("C")])
    Sigma <- diagonalMatrix(5)
    
    # generate the multivariate data.
    x ~ dnPhyloMultivariateBrownianREML(tree=psi, rateMatrix=Sigma)
    
    # print the simulated data.
    x
  authors:
    - 'Michael R. May'
    - 'Nicolai Vetr'
  see_also:
    - 'dnPhyloBrownianREML'
    - 'dnPhyloBrownianMVN'
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloMultivariateBrownianREML(Tree<any> tree, RealPos|RealPos[]<any> branchRates, MatrixRealSymmetric|MatrixReal<any> rateMatrix)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'branchRates'
          description: 'The per branch rate-multiplier(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rateMatrix'
          description: 'The variance-covariance matrix.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'MatrixRealSymmetric'
          default:
          options:
  methods:
  references:
    - citation: 'Huelsenbeck JP, B Rannala (2003). Detecting correlation between characters in a comparative analysis with uncertain phylogeny. Evolution, 57(6):1237-1247.'
      doi:
      url:
- name: 'dnPhyloOrnsteinUhlenbeck'
  title:
  aliases: 'dnPhyloOU'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real[]'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeck()'
      arguments:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckMVN'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckMVN(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckREML'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckREML(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloOrnsteinUhlenbeckThreePoint'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'ContinuousCharacterData'
  constructor:
    - usage: 'dnPhyloOrnsteinUhlenbeckThreePoint(Tree<any> tree, RealPos|RealPos[]<any> alpha, Real|Real[]<any> theta, RealPos|RealPos[]<any> sigma, Real|Real[]<any> rootStates, Natural<any> nSites)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the character evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
        - label: 'alpha'
          description: 'The rate of attraction/selection (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'theta'
          description: 'The optimum value (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '1'
          options:
        - label: 'sigma'
          description: 'The rate of random drift (per branch).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'rootStates'
          description: 'The vector of root states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'nSites'
          description: 'The number of sites which is used for the initialized (random draw) from this distribution.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
  methods:
  references:
- name: 'dnPhyloWhiteNoise'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'RealPos[]'
  constructor:
    - usage: 'dnPhyloWhiteNoise(TimeTree<any> tree, RealPos<any> sigma)'
      arguments:
        - label: 'tree'
          description: 'The tree along which the process evolves.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'TimeTree'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnPoisson'
  title: 'Poisson Distribution'
  aliases: 'dnPois'
  description: 'A Poisson distribution defines probabilities for natural numbers. It is defined as the number of exponentially distributed events in a given interval.'
  details:
  example: |
    l ~ dnUniform(0.0,100.0)
    x ~ dnPoisson(l)
    x.clamp(10)
    moves[1] = mvSlide(l, delta=0.1, weight=1.0)
    monitors[1] = mnScreen(printgen=1000, separator = "	", l)
    mymodel = model(l)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnGeom'
  domain: 'Natural'
  constructor:
    - usage: 'dnPoisson(RealPos<any> lambda)'
      arguments:
        - label: 'lambda'
          description: 'The rate (rate = 1/mean) parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnReversibleJumpMixture'
  title:
  aliases: 'dnRJMixture'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnReversibleJumpMixture(Real<any> constantValue, Distribution__Real<any> baseDistribution, Probability<any> p)'
      arguments:
        - label: 'constantValue'
          description: 'The fixed value this distribution can take.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'baseDistribution'
          description: 'The distribution from which the value is alternatively drawn.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__Real'
          default:
          options:
        - label: 'p'
          description: 'The probability of being the fixed value.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnSBBDP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnSBBDP(RealPos<any> rootAge, RealPos<any> lambda, RealPos<any> mu, Probability<any> rho, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The vector of speciation rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnScaledDirichlet'
  title: 'Scaled Dirichlet Distribution'
  aliases:
  description: 'Scaled Dirichlet probability distribution on a simplex.'
  details: 'The scaled Dirichlet probability distribution is the generalization of the dirichlet distribution. A random variable from a scaled Dirichlet distribution is a simplex, i.e., a vector of probabilities that sum to 1. If b[1]=b[2]=...=b[n], then the scaledDirichlet(alpha,beta) collapses to the Dirichlet with the same alphas.'
  example: |
    # lets get a draw from a Dirichlet distribution
    a <- [1,1,1,1]   # we could also use rep(1,4)
    b <- [1,2,3,4]   # if these are all equal, the scaled Dirichlet is equivilent to the Dirichlet(a)x ~ dnScaledDirichlet(a,b)
    x
    # let check if b really sums to 1
    sum(x)
  authors: 'Andrew Magee'
  see_also:
    - 'dnDirichlet'
    - 'simplex'
  domain: 'Simplex'
  constructor:
    - usage: 'dnScaledDirichlet(RealPos[]<any> alpha, RealPos[]<any> beta)'
      arguments:
        - label: 'alpha'
          description: 'The concentration parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'beta'
          description: 'The rate parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
  methods:
  references:
- name: 'dnSerialSampledBirthDeath'
  title:
  aliases:
    - 'dnSSBDP'
    - 'dnFBDP'
    - 'dnSkylineBDP'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnSerialSampledBirthDeath(RealPos<any> rootAge/originAge, RealPos|RealPos[]<any> lambda, RealPos|RealPos[]<any> mu, RealPos|RealPos[]<any> psi, Probability|Probability[]<any> rho, RealPos[]<any> timeline, RealPos[]<any> lambdaTimes, RealPos[]<any> muTimes, RealPos[]<any> psiTimes, RealPos[]<any> rhoTimes, String<any> condition {valid options: "time"|"survival"}, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'lambda'
          description: 'The speciation rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'mu'
          description: 'The extinction rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'psi'
          description: 'The serial sampling rate(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'rho'
          description: 'The episodic taxon sampling fraction(s).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'timeline'
          description: 'The rate interval change times of the piecewise constant process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'lambdaTimes'
          description: 'The speciation rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'muTimes'
          description: 'The extinction rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'psiTimes'
          description: 'The serial sampling rate change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'rhoTimes'
          description: 'The episodic taxon sampling fraction change times.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'condition'
          description: 'The condition of the process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'taxa'
          description: 'The taxa used for initialization.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnSoftBoundUniformNormal'
  title: 'Softbound Uniform Distribution with Normal distributed tails.'
  aliases:
  description: 'A softbound uniform distribution with normally distributed tails outside the interval of the uniform distribution.'
  details: 'The center piece of this distribution a uniform distribution defined between the given interval. A variable is drawn from that uniform distribution with probability p and with probability 1-p outside the interval. The probability density outside the interval is described by a normal distribution with standard deviation sd.'
  example: |
    p ~ dnBeta(1.0,1.0)
    x ~ dnBernoulli(p)
    x.clamp(1)
    moves[1] = mvSlide(p, delta=0.1, weight=1.0)
    monitors[1] = screenmonitor(printgen=1000, separator = "	", speciation)
    mymodel = model(p)
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.burnin(generations=20000,tuningInterval=100)
    mymcmc.run(generations=200000)
  authors: 'Sebastian Hoehna'
  see_also: 'dnUniform'
  domain: 'Real'
  constructor:
    - usage: 'dnSoftBoundUniformNormal(Real<any> min, Real<any> max, RealPos<any> sd, Probability<any> p)'
      arguments:
        - label: 'min'
          description: 'The min value of the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'max'
          description: 'The max value of the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'sd'
          description: 'The standard deviation of the normal distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'p'
          description: 'The probability of being within the uniform distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default:
          options:
  methods:
  references:
- name: 'dnStudentT'
  title: 'Student T Distribution'
  aliases:
    - 'dnStudentT'
    - 'dnT'
    - 'dnGossetT'
  description: 'The student''s t probability distribution.'
  details:
  example: |
    # The most important use of the Student T distribution
    # is arguable the quantile function.
    # You can access it the following way:
    df <- 10
    a := qStudentT(0.025, df)
    a
  authors: 'Wade Dismukes and Kevin Quinteros'
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnStudentT(Natural<any> df)'
      arguments:
        - label: 'df'
          description: 'The degrees of freedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnTimeVaryingStateDependentSpeciationExtinction'
  title:
  aliases: 'dnTVSSE'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnTimeVaryingStateDependentSpeciationExtinction(RealPos<any> rootAge/originAge, CladogeneticSpeciationRateMatrix|RealPos[][]<any> speciationRates/lambda/cladoEventMap, RealPos[][]<any> extinctionRates/mu, RealPos[][]<any> psi/phi, RealPos[]<any> epochs, RateGenerator[]<any> Q, RealPos<any> delta, Simplex<any> pi, Probability<any> rho, String<any> condition {valid options: "time"|"survival"}, RealPos<any> nTimeSlices, Natural<any> minNumLineages, Natural<any> maxNumLineages, Bool<any> pruneExtinctLineages)'
      arguments:
        - label: 'rootAge/originAge'
          description: 'The start time of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'speciationRates/lambda/cladoEventMap'
          description: 'The vector of speciation rates (for anagenetic-only models), or the map of speciation rates to cladogenetic event types.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'CladogeneticSpeciationRateMatrix'
          default:
          options:
        - label: 'extinctionRates/mu'
          description: 'The vector of extinction rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[][]'
          default:
          options:
        - label: 'psi/phi'
          description: 'The vector of serial sampling rates.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[][]'
          default: 'NULL'
          options:
        - label: 'epochs'
          description: 'The time intervals when the diversification and transition rates change.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'Q'
          description: 'The rate matrix of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RateGenerator[]'
          default: 'NULL'
          options:
        - label: 'delta'
          description: 'The rate-factor of jumping between rate categories.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'pi'
          description: 'State frequencies at the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Simplex'
          default: 'NULL'
          options:
        - label: 'rho'
          description: 'The taxon sampling probability.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Probability'
          default: '1'
          options:
        - label: 'condition'
          description: 'The condition of the birth-death process.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'time'
          options:
            - 'time'
            - 'survival'
        - label: 'nTimeSlices'
          description: 'The number of time slices for the numeric ODE.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '500'
          options:
        - label: 'minNumLineages'
          description: 'The minimum number of lineages to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'maxNumLineages'
          description: 'The maximum number of lineages to simulate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '500'
          options:
        - label: 'pruneExtinctLineages'
          description: 'When simulating should extinct lineages be pruned off?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnUPP'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'RealPos[]'
  constructor:
    - usage: 'dnUPP(RealPos[]<any> values, Bool<any> include_zero)'
      arguments:
        - label: 'values'
          description: 'The possible non-zero values in the most fragmented partition of the set.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos[]'
          default:
          options:
        - label: 'include_zero'
          description: 'Should the partitions also include zero values?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
  methods:
  references:
- name: 'dnUltrametricTree'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnUltrametricTree(Distribution__TimeTree<any> treePrior, Distribution__RealPos<any> ratePrior, RealPos<any> rootAge, TraceTree<any> trees)'
      arguments:
        - label: 'treePrior'
          description: 'The prior distribution for the time tree (divergence times).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'ratePrior'
          description: 'The prior distribution for the branch rates.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__RealPos'
          default:
          options:
        - label: 'rootAge'
          description: 'The root age variable.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'trees'
          description: 'The trace of tree samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'TraceTree'
          default:
          options:
  methods:
  references:
- name: 'dnUniform'
  title:
  aliases: 'dnUnif'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnUniform(Real<any> lower, Real<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default:
          options:
  methods:
  references:
- name: 'dnUniformInteger'
  title:
  aliases: 'dnUnifInt'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Integer'
  constructor:
    - usage: 'dnUniformInteger(Integer<any> lower, Integer<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Integer'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Integer'
          default:
          options:
  methods:
  references:
- name: 'dnUniformNatural'
  title:
  aliases: 'dnUnifNat'
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'Natural'
  constructor:
    - usage: 'dnUniformNatural(Natural<any> lower, Natural<any> upper)'
      arguments:
        - label: 'lower'
          description: 'The lower bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'upper'
          description: 'The upper bound.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'dnUniformTimeTree'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnUniformTimeTree(RealPos<any> rootAge, Taxon[]<any> taxa)'
      arguments:
        - label: 'rootAge'
          description: 'The age of the root.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'taxa'
          description: 'The taxa used for simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
  methods:
  references:
- name: 'dnUniformTopology'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'BranchLengthTree'
  constructor:
    - usage: 'dnUniformTopology(Taxon[]<any> taxa, Clade<any> outgroup, Clade[]<any> constraints, Bool<any> rooted)'
      arguments:
        - label: 'taxa'
          description: 'The vector of taxa that will be used for the tips.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'outgroup'
          description: 'The clade (consisting of one or more taxa) used as an outgroup.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default: 'NULL'
          options:
        - label: 'constraints'
          description: 'The topological constraints that will be enforced.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade[]'
          default: 'NULL'
          options:
        - label: 'rooted'
          description: 'Is the distribution over rooted topologies?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
  references:
- name: 'dnUniformTopologyBranchLength'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'BranchLengthTree'
  constructor:
    - usage: 'dnUniformTopologyBranchLength(Taxon[]<any> taxa, Clade<any> outgroup, Distribution__RealPos<any> branchLengthDistribution)'
      arguments:
        - label: 'taxa'
          description: 'The vector of taxa that will be used for the tips.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'outgroup'
          description: 'The clade (consisting of one or more taxa) used as an outgroup.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default: 'NULL'
          options:
        - label: 'branchLengthDistribution'
          description: 'The base distribution for the branch lengths.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Distribution__RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnVarianceGamma'
  title: 'Variance-gamma Distribution'
  aliases: 'dnVG'
  description: 'Variance-gamma distribution with location ‘mu’.'
  details:
    - 'The variance-gamma distribution has density:'
    - 'f(x) = 1/(sqrt(2 pi) sigma) e^-((x - mu)^2/(2 sigma^2))'
    - 'where mu is the mean of the distribution and sigma the standard deviation.'
  example: |
    # we simulate some oversations
    x <- rnorm(n=10,mean=5,sd=10)
    # let's see what the minum is (you could do the max too)
    min(x)
    # let's also see what the mean and the variance are
    mean(x)
    var(x)
    sd(x)
  authors: 'Michael Landis'
  see_also:
  domain: 'Real'
  constructor:
    - usage: 'dnVarianceGamma(Real<any> mu, RealPos<any> kappa, RealPos<any> tau, RealPos<any> time)'
      arguments:
        - label: 'mu'
          description: 'The mean parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Real'
          default: '0'
          options:
        - label: 'kappa'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'tau'
          description: 'The standard deviation parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'time'
          description: 'The duration of time for the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
  references:
- name: 'dnWeightedConstrainedNodeOrder'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree'
  constructor:
    - usage: 'dnWeightedConstrainedNodeOrder(Distribution__TimeTree<any> treeDistribution, RlRelativeNodeAgeWeightedConstraints<any> constraints, RealPos<any> beta)'
      arguments:
        - label: 'treeDistribution'
          description: 'The base distribution for the tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'constraints'
          description: 'The node order constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RlRelativeNodeAgeWeightedConstraints'
          default:
          options:
        - label: 'beta'
          description: 'The beta weight for the constraints.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnWeightedSample'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'TimeTree[]'
  constructor:
    - usage: 'dnWeightedSample(Distribution__TimeTree|Distribution__TimeTree[]<any> baseDistribution, Natural<any> numSamples)'
      arguments:
        - label: 'baseDistribution'
          description: 'The base distribution(s) for the sampled values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Distribution__TimeTree'
          default:
          options:
        - label: 'numSamples'
          description: 'The number of samples in the weighted average.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
  methods:
  references:
- name: 'dnWhiteNoise'
  title: 'White-Noise Process'
  aliases:
  description: 'White-Noise process for positive real numbers.'
  details: 'The white-noise process is a process of a positive continuous variable similar to Brownian motion and the Ornstein-Uhlenbeck process. However, the white-noise process has a large variance when the time is small, and has small variance if the time is large.'
  example: |
    # lets simulate
    a <- rWhiteNoise(1000,mu=1,sigma=4,time=4)
    # we expect a mean of 1
    mean(a)
    
    # create a random variable
    x ~ dnWhiteNoise(mu=1.0,sigma=4,time=1)
    x
  authors: 'Sebastian Hoehna'
  see_also: 'dnGamma'
  domain: 'RealPos'
  constructor:
    - usage: 'dnWhiteNoise(RealPos<any> mu, RealPos<any> sigma, RealPos<any> time)'
      arguments:
        - label: 'mu'
          description: 'The mean of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'sigma'
          description: 'The standard deviation of the process.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'time'
          description: 'The time that the process has run.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
  methods:
  references:
- name: 'dnWishart'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  domain: 'MatrixRealSymmetric'
  constructor:
    - usage: 'dnWishart(Natural<any> df, RealPos<any> kappa, Natural<any> dim)'
      arguments:
        - label: 'df'
          description: 'The degrees of dreedom.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'kappa'
          description: 'The scaling parameter.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default:
          options:
        - label: 'dim'
          description: 'The dimension of the distribution.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
