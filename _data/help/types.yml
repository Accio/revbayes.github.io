- name: 'AbstractHomologousDiscreteCharacterData'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'AbstractAbstractDiscreteTaxonData'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'addMissingTaxa'
      return_type: 'void'
      usage: 'addMissingTaxa(String|Taxon|String[]|Taxon[]<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'chartype'
      return_type: 'String'
      usage: 'chartype()'
      arguments:
    - name: 'computeMultinomialProfileLikelihood'
      return_type: 'Real'
      usage: 'computeMultinomialProfileLikelihood()'
      arguments:
    - name: 'computeStateFrequencies'
      return_type: 'MatrixReal'
      usage: 'computeStateFrequencies()'
      arguments:
    - name: 'excludeAll'
      return_type: 'void'
      usage: 'excludeAll()'
      arguments:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural<any> pos)'
      arguments:
        - label: 'pos'
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String|Taxon<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String[]|Taxon[]<any> taxa)'
      arguments:
        - label: 'taxa'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'expandCharacters'
      return_type: 'AbstractHomologousDiscreteCharacterData'
      usage: 'expandCharacters(Natural<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The factor by which the state space is expanded.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'filename'
      return_type: 'String'
      usage: 'filename()'
      arguments:
    - name: 'getEmpiricalBaseFrequencies'
      return_type: 'Simplex'
      usage: 'getEmpiricalBaseFrequencies()'
      arguments:
    - name: 'getIncludedCharacterIndices'
      return_type: 'Natural[]'
      usage: 'getIncludedCharacterIndices()'
      arguments:
    - name: 'getNumInvariantSites'
      return_type: 'Natural'
      usage: 'getNumInvariantSites(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'getPairwiseDifference'
      return_type: 'DistanceMatrix'
      usage: 'getPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'getStateDescriptions'
      return_type: 'String[]'
      usage: 'getStateDescriptions()'
      arguments:
    - name: 'includeAll'
      return_type: 'void'
      usage: 'includeAll()'
      arguments:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural<any> )'
      arguments:
        - label:
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'isHomologous'
      return_type: 'Bool'
      usage: 'isHomologous()'
      arguments:
    - name: 'isResolved'
      return_type: 'Bool'
      usage: 'isResolved(Natural<any> taxonIndex, Natural<any> charIndex)'
      arguments:
        - label: 'taxonIndex'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isSequenceMissing'
      return_type: 'Bool'
      usage: 'isSequenceMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'maxGcContent'
      return_type: 'Probability'
      usage: 'maxGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxInvariableBlockLength'
      return_type: 'Natural'
      usage: 'maxInvariableBlockLength(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxPairwiseDifference'
      return_type: 'Natural'
      usage: 'maxPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'maxVariableBlockLength'
      return_type: 'Natural'
      usage: 'maxVariableBlockLength(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'meanGcContent'
      return_type: 'Probability'
      usage: 'meanGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'meanGcContentByCodonPosition'
      return_type: 'Probability'
      usage: 'meanGcContentByCodonPosition(Natural<any> index, Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'index'
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'minGcContent'
      return_type: 'Probability'
      usage: 'minGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'minPairwiseDifference'
      return_type: 'Natural'
      usage: 'minPairwiseDifference(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nchar'
      return_type: 'Natural'
      usage: 'nchar()'
      arguments:
    - name: 'ntaxa'
      return_type: 'Natural'
      usage: 'ntaxa()'
      arguments:
    - name: 'numInvariableBlocks'
      return_type: 'Natural'
      usage: 'numInvariableBlocks(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'numTaxaMissingSequence'
      return_type: 'Natural'
      usage: 'numTaxaMissingSequence(Probability<any> x)'
      arguments:
        - label: 'x'
          description: 'The percentage/threshold for the missing sequence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default:
          options:
    - name: 'percentageMissing'
      return_type: 'Probability'
      usage: 'percentageMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'setCodonPartition'
      return_type: 'void'
      usage: 'setCodonPartition(Natural<any> )'
      arguments:
        - label:
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'setCodonPartition'
      return_type: 'void'
      usage: 'setCodonPartition(Natural[]<any> )'
      arguments:
        - label:
          description: 'The indicies of the codon positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'setNumStatesPartition'
      return_type: 'void'
      usage: 'setNumStatesPartition(Natural<any> )'
      arguments:
        - label:
          description: 'The number of states in this partition.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setTaxonObject'
      return_type: 'void'
      usage: 'setTaxonObject(String<any> current, Taxon<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon'
          default:
          options:
    - name: 'show'
      return_type: 'void'
      usage: 'show()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'taxonIndex'
      return_type: 'Natural'
      usage: 'taxonIndex(String<any> name)'
      arguments:
        - label: 'name'
          description: 'he name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'translateCharacters'
      return_type: 'AbstractHomologousDiscreteCharacterData'
      usage: 'translateCharacters(String<any> type)'
      arguments:
        - label: 'type'
          description: 'The character type into which we want to translate.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'varGcContent'
      return_type: 'Probability'
      usage: 'varGcContent(Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'varGcContentByCodonPosition'
      return_type: 'Probability'
      usage: 'varGcContentByCodonPosition(Natural<any> index, Bool<any> excludeAmbiguous)'
      arguments:
        - label: 'index'
          description: 'The index of the codon position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'excludeAmbiguous'
          description: 'Should we exclude ambiguous and missing characters?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
- name: 'Bool'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'BootstrapAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'BootstrapAnalysis(MaximumLikelihoodAnalysis<any> estimator, Natural<any> simulations)'
      arguments:
        - label: 'estimator'
          description: 'The maximum likelihood estimation object.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MaximumLikelihoodAnalysis'
          default:
          options:
        - label: 'simulations'
          description: 'How many replicate simulations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(RealPos<any> epsilon)'
      arguments:
        - label: 'epsilon'
          description: 'The minimum improvement in the last interval.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.001'
          options:
  references:
- name: 'BranchLengthTree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestryof a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several usefulmethods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'reroot'
      return_type: 'void'
      usage: 'reroot(String<any> leaf)'
      arguments:
        - label: 'leaf'
          description: 'The outgroup leaf.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
  references:
- name: 'CharacterHistoryRateModifier'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'CladogeneticProbabilityMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'CladogeneticSpeciationRateMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'ContinuousCharacterData'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'ContinuousTaxonData'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'addMissingTaxa'
      return_type: 'void'
      usage: 'addMissingTaxa(String|Taxon|String[]|Taxon[]<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeAll'
      return_type: 'void'
      usage: 'excludeAll()'
      arguments:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural<any> pos)'
      arguments:
        - label: 'pos'
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'excludeCharacter'
      return_type: 'void'
      usage: 'excludeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String|Taxon<any> taxon)'
      arguments:
        - label: 'taxon'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'excludeTaxa'
      return_type: 'void'
      usage: 'excludeTaxa(String[]|Taxon[]<any> taxa)'
      arguments:
        - label: 'taxa'
          description: 'The name(s) of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'filename'
      return_type: 'String'
      usage: 'filename()'
      arguments:
    - name: 'get'
      return_type: 'Real'
      usage: 'get(Natural<any> i, Natural<any> j)'
      arguments:
        - label: 'i'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'getIncludedCharacterIndices'
      return_type: 'Natural[]'
      usage: 'getIncludedCharacterIndices()'
      arguments:
    - name: 'getPairwiseSpeciesDifference'
      return_type: 'DistanceMatrix'
      usage: 'getPairwiseSpeciesDifference(Natural<any> charIndex)'
      arguments:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'getTaxon'
      return_type: 'ContinuousTaxonData'
      usage: 'getTaxon(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeAll'
      return_type: 'void'
      usage: 'includeAll()'
      arguments:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural<any> )'
      arguments:
        - label:
          description: 'The position of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'includeCharacter'
      return_type: 'void'
      usage: 'includeCharacter(Natural[]<any> )'
      arguments:
        - label:
          description: 'A vector of character positions.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural[]'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'includeTaxa'
      return_type: 'void'
      usage: 'includeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'isResolved'
      return_type: 'Bool'
      usage: 'isResolved(Natural<any> taxonIndex, Natural<any> charIndex)'
      arguments:
        - label: 'taxonIndex'
          description: 'The index of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'charIndex'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isSequenceMissing'
      return_type: 'Bool'
      usage: 'isSequenceMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'maxDifference'
      return_type: 'Real'
      usage: 'maxDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'maxSpeciesDifference'
      return_type: 'Real'
      usage: 'maxSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanDifference'
      return_type: 'Real'
      usage: 'meanDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanSpeciesDifference'
      return_type: 'Real'
      usage: 'meanSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'meanValue'
      return_type: 'Real'
      usage: 'meanValue(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'minDifference'
      return_type: 'Real'
      usage: 'minDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'minSpeciesDifference'
      return_type: 'Real'
      usage: 'minSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nchar'
      return_type: 'Natural'
      usage: 'nchar()'
      arguments:
    - name: 'ntaxa'
      return_type: 'Natural'
      usage: 'ntaxa()'
      arguments:
    - name: 'percentageMissing'
      return_type: 'Probability'
      usage: 'percentageMissing(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'removeTaxa'
      return_type: 'void'
      usage: 'removeTaxa(String[]<any> names)'
      arguments:
        - label: 'names'
          description: 'The names of the taxa.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String[]'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'setTaxonObject'
      return_type: 'void'
      usage: 'setTaxonObject(String<any> current, Taxon<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon'
          default:
          options:
    - name: 'show'
      return_type: 'void'
      usage: 'show()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'taxonIndex'
      return_type: 'Natural'
      usage: 'taxonIndex(String<any> name)'
      arguments:
        - label: 'name'
          description: 'he name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'var'
      return_type: 'RealPos'
      usage: 'var(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'varDifference'
      return_type: 'Real'
      usage: 'varDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'varSpeciesDifference'
      return_type: 'Real'
      usage: 'varSpeciesDifference(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'withinSpeciesVar'
      return_type: 'RealPos'
      usage: 'withinSpeciesVar(Natural<any> species, Natural<any> site)'
      arguments:
        - label: 'species'
          description: 'The index of the species.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'CorrespondenceAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'CorrespondenceAnalysis(MatrixReal<any> data, Natural<any> numAxes, RealPos<any> tolerance)'
      arguments:
        - label: 'data'
          description: 'The matrix of numerical values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MatrixReal'
          default:
          options:
        - label: 'numAxes'
          description: 'The number of principle components.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tolerance'
          description: 'The allowed machine tolerance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1e-07'
          options:
  methods:
    - name: 'columnCoordinates'
      return_type: 'MatrixReal'
      usage: 'columnCoordinates()'
      arguments:
    - name: 'columnWeights'
      return_type: 'RealPos[]'
      usage: 'columnWeights()'
      arguments:
    - name: 'principalAxes'
      return_type: 'MatrixReal'
      usage: 'principalAxes()'
      arguments:
    - name: 'rank'
      return_type: 'Natural'
      usage: 'rank()'
      arguments:
    - name: 'rowCoordinates'
      return_type: 'MatrixReal'
      usage: 'rowCoordinates()'
      arguments:
  references:
- name: 'DistanceMatrix'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: 'getElement'
      return_type: 'Real'
      usage: 'getElement(Natural<any> i, Natural<any> j)'
      arguments:
        - label: 'i'
          description: 'The row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'matrix'
      return_type: 'MatrixReal'
      usage: 'matrix()'
      arguments:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'setElement'
      return_type: 'void'
      usage: 'setElement(Natural<any> i, Natural<any> j, Real<any> v)'
      arguments:
        - label: 'i'
          description: 'The row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'j'
          description: 'The column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'v'
          description: 'The value.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Real'
          default:
          options:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'symmetricMatrix'
      return_type: 'MatrixRealSymmetric'
      usage: 'symmetricMatrix()'
      arguments:
  references:
- name: 'HillClimber'
  title: 'Hill-Climber analysis object'
  aliases:
  description: 'The HillClimber analysis object keeps a model and the associated moves and monitors. The object is used to run Markov chain Monte Carlo (HillClimber) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: ' The HillClimber analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The HillClimber analysis object is used to run Markov chain Monte Carlo (HillClimber) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an HillClimber object
    myHillClimberObject = HillClimber( mymodel, monitors, moves)
    
    # Run a short analysis
    myHillClimberObject.burnin( generations = 400, tuningInterval = 100)
    myHillClimberObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    myHillClimberObject.operatorSummary()
  authors: 'Sebastian Hoehna'
  see_also: 'SimulatedAnnealing'
  constructor:
    - usage: 'HillClimber(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"})'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(RealPos<any> epsilon)'
      arguments:
        - label: 'epsilon'
          description: 'The minimum improvement in the last interval.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.001'
          options:
    - name: 'variable'
      return_type: 'RevObject'
      usage: 'variable(String<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the variable.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
  references:
- name: 'Integer'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'MatrixReal'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'Real[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'Real[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'max'
      return_type: 'Real'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'Real'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'MatrixRealPos'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'RealPos[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'RealPos[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'max'
      return_type: 'RealPos'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'RealPos'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
  references:
- name: 'MatrixRealSymmetric'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'Real[]'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the row.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'column'
      return_type: 'Real[]'
      usage: 'column(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the column.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'diagonal'
      return_type: 'RealPos[]'
      usage: 'diagonal()'
      arguments:
    - name: 'max'
      return_type: 'Real'
      usage: 'max()'
      arguments:
    - name: 'min'
      return_type: 'Real'
      usage: 'min()'
      arguments:
    - name: 'ncolumns'
      return_type: 'Natural'
      usage: 'ncolumns()'
      arguments:
    - name: 'nrows'
      return_type: 'Natural'
      usage: 'nrows()'
      arguments:
    - name: 'precision'
      return_type: 'MatrixRealSymmetric'
      usage: 'precision()'
      arguments:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'upperTriangle'
      return_type: 'RealPos[]'
      usage: 'upperTriangle()'
      arguments:
  references:
- name: 'Natural'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'RateGenerator'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'Real'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'RealPos'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'RevObject'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
  references:
- name: 'Simplex'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'Probability'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'String'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
  methods:
    - name: '[]'
      return_type: 'String'
      usage: '[](Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'charAt'
      return_type: 'String'
      usage: 'charAt(Natural<any> index)'
      arguments:
        - label: 'index'
          description: 'The index of the element.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'find'
      return_type: 'Natural'
      usage: 'find(String<any> substr)'
      arguments:
        - label: 'substr'
          description: 'The substring for which we want to find the position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'indexOf'
      return_type: 'Natural'
      usage: 'indexOf(String<any> substr)'
      arguments:
        - label: 'substr'
          description: 'The substring for which we want to find the position.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'size'
      return_type: 'Natural'
      usage: 'size()'
      arguments:
    - name: 'substr'
      return_type: 'String'
      usage: 'substr(Natural<any> begin, Natural<any> end)'
      arguments:
        - label: 'begin'
          description: 'The index of the first character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'end'
          description: 'The index of the last character.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'TimeTree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestryof a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several usefulmethods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'collapseNegativeBranches'
      return_type: 'void'
      usage: 'collapseNegativeBranches(RealPos<any> length)'
      arguments:
        - label: 'length'
          description: 'The new length of all negative branches.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RealPos'
          default: '0'
          options:
    - name: 'colless'
      return_type: 'Natural'
      usage: 'colless()'
      arguments:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropFossils'
      return_type: 'void'
      usage: 'dropFossils()'
      arguments:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'gammaStatistic'
      return_type: 'Real'
      usage: 'gammaStatistic()'
      arguments:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getFossils'
      return_type: 'Taxon[]'
      usage: 'getFossils()'
      arguments:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'isRoot'
      return_type: 'Bool'
      usage: 'isRoot(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeAge'
      return_type: 'RealPos'
      usage: 'nodeAge(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'numSampledAncestors'
      return_type: 'Natural'
      usage: 'numSampledAncestors()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'rootAge'
      return_type: 'RealPos'
      usage: 'rootAge()'
      arguments:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
  references:
- name: 'Tree'
  title: 'Tree datatype'
  aliases:
  description: 'The Tree datatype stores information to describe the shared ancestryof a taxon set. Information includes taxon labels, topology, nodecount, and branch lengths. Tree objects also possess several usefulmethods to traverse and manipulate the Tree''s value.'
  details:
  example:
  authors:
  see_also:
    - 'TimeTree'
    - 'BranchLengthTree'
  constructor:
  methods:
    - name: 'branchLength'
      return_type: 'RealPos'
      usage: 'branchLength(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'calculateEDR'
      return_type: 'RealPos[]'
      usage: 'calculateEDR()'
      arguments:
    - name: 'calculateMNTD'
      return_type: 'Real'
      usage: 'calculateMNTD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Nearest Taxon Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MNTD z-score or the observed MNTD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MNTD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'calculateMPD'
      return_type: 'Real'
      usage: 'calculateMPD(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex, Natural<any> site, Bool<any> zScore, Bool<any> useBranchLengths, Natural<any> randomizations)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Mean Phylogenetic Distance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The index of the character state.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'site'
          description: 'The index of the site in the alignment.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'zScore'
          description: 'Calculate the MPD z-score or the observed MPD?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'useBranchLengths'
          description: 'Should MPD use branch length or nodal distances?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'TRUE'
          options:
        - label: 'randomizations'
          description: 'How many randomizations should be performed when calculating z-score?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
    - name: 'child'
      return_type: 'Natural'
      usage: 'child(Natural<any> node, Natural<any> index)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'index'
          description: 'The index of the child of this node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'containsClade'
      return_type: 'Bool'
      usage: 'containsClade(Clade<any> clade)'
      arguments:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'dropTip'
      return_type: 'void'
      usage: 'dropTip(String|Taxon<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'fitchScore'
      return_type: 'Natural'
      usage: 'fitchScore(AbstractHomologousDiscreteCharacterData<any> characters)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the Fitch Score.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
    - name: 'getClade'
      return_type: 'Clade'
      usage: 'getClade(Taxon[]<any> clade)'
      arguments:
        - label: 'clade'
          description: 'Vector of some of the taxa included in the clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Taxon[]'
          default:
          options:
    - name: 'getInverseES'
      return_type: 'RealPos[]'
      usage: 'getInverseES()'
      arguments:
    - name: 'getPSSP'
      return_type: 'RealPos[]'
      usage: 'getPSSP(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment to use when computing the Parsimoniously Same State Paths (PSSP).'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'hasSameTopology'
      return_type: 'Bool'
      usage: 'hasSameTopology(Tree<any> tree)'
      arguments:
        - label: 'tree'
          description: 'The reference tree.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Tree'
          default:
          options:
    - name: 'isBinary'
      return_type: 'Bool'
      usage: 'isBinary()'
      arguments:
    - name: 'isContainedInClade'
      return_type: 'Bool'
      usage: 'isContainedInClade(Natural<any> node, Clade<any> clade)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
        - label: 'clade'
          description: 'The embracing clade.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Clade'
          default:
          options:
    - name: 'isInternal'
      return_type: 'Bool'
      usage: 'isInternal(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'makeUltrametric'
      return_type: 'void'
      usage: 'makeUltrametric()'
      arguments:
    - name: 'meanInverseES'
      return_type: 'RealPos'
      usage: 'meanInverseES(AbstractHomologousDiscreteCharacterData<any> characters, Natural<any> stateIndex)'
      arguments:
        - label: 'characters'
          description: 'The character alignment from which to compute the mean inverse ES metric.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AbstractHomologousDiscreteCharacterData'
          default:
          options:
        - label: 'stateIndex'
          description: 'The state index.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'names'
      return_type: 'String[]'
      usage: 'names()'
      arguments:
    - name: 'nnodes'
      return_type: 'Natural'
      usage: 'nnodes()'
      arguments:
    - name: 'nodeName'
      return_type: 'String'
      usage: 'nodeName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'ntips'
      return_type: 'Natural'
      usage: 'ntips()'
      arguments:
    - name: 'offset'
      return_type: 'void'
      usage: 'offset(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The offset factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'parent'
      return_type: 'Natural'
      usage: 'parent(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'removeDuplicateTaxa'
      return_type: 'void'
      usage: 'removeDuplicateTaxa()'
      arguments:
    - name: 'rescale'
      return_type: 'void'
      usage: 'rescale(RealPos<any> factor)'
      arguments:
        - label: 'factor'
          description: 'The scaling factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
    - name: 'setNegativeConstraint'
      return_type: 'void'
      usage: 'setNegativeConstraint(Bool<any> flag)'
      arguments:
        - label: 'flag'
          description: 'Is the tree a negative constraint?.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
    - name: 'setTaxonName'
      return_type: 'void'
      usage: 'setTaxonName(String<any> current, String<any> new)'
      arguments:
        - label: 'current'
          description: 'The old name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'new'
          description: 'The new name.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
    - name: 'taxa'
      return_type: 'Taxon[]'
      usage: 'taxa()'
      arguments:
    - name: 'tipIndex'
      return_type: 'Natural'
      usage: 'tipIndex(String|Taxon<any> name)'
      arguments:
        - label: 'name'
          description: 'The name of the tip/taxon.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
    - name: 'treeLength'
      return_type: 'RealPos'
      usage: 'treeLength()'
      arguments:
  references:
- name: 'beca'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'beca(String|String[]<any> filename, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The name of the file with the parameter samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The delimiter/separator between values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run()'
      arguments:
    - name: 'setBurninMethod'
      return_type: 'void'
      usage: 'setBurninMethod(String<any> method {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'method'
          description: 'The burnin estimation method.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
            - 'ESS'
            - 'SEM'
    - name: 'verbose'
      return_type: 'void'
      usage: 'verbose(Bool<any> x)'
      arguments:
        - label: 'x'
          description: 'Should the output be verbose?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default:
          options:
  references:
- name: 'clade'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'clade(String ..., String[] ..., Clade ..., Taxon ..., Taxon[] ..., RealPos<any> age, Natural<any> missing, Bool<any> negative, Bool<any> optional_match)'
      arguments:
        - label:
          description: 'Taxon names as string values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String'
          default:
          options:
        - label:
          description: 'Taxon names as a vector of string values.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'String[]'
          default:
          options:
        - label:
          description: 'Taxa as clade objects.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Clade'
          default:
          options:
        - label:
          description: 'Taxon names as taxon values'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon'
          default:
          options:
        - label:
          description: 'Taxon names as a vector of taxons'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Taxon[]'
          default:
          options:
        - label: 'age'
          description: 'The age of the clade (optional).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: 'NULL'
          options:
        - label: 'missing'
          description: 'Number of missing taxa in the clade (optional).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'negative'
          description: 'Is this a negative clade constraint?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'optional_match'
          description: 'Clade constraint satisfied when any Clade argument matched'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  methods:
    - name: 'getNumberOfTaxaMissing'
      return_type: 'Natural'
      usage: 'getNumberOfTaxaMissing()'
      arguments:
    - name: 'getTaxon'
      return_type: 'Taxon'
      usage: 'getTaxon(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'getTaxonName'
      return_type: 'String'
      usage: 'getTaxonName(Natural<any> node)'
      arguments:
        - label: 'node'
          description: 'The index of the node.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'setNumberOfTaxaMissing'
      return_type: 'void'
      usage: 'setNumberOfTaxaMissing(Natural<any> n)'
      arguments:
        - label: 'n'
          description: 'The number of missing taxa.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Natural'
          default:
          options:
    - name: 'size'
      return_type: 'void'
      usage: 'size()'
      arguments:
  references:
- name: 'mcmc'
  title: 'MCMC analysis object'
  aliases:
  description: 'The MCMC analysis object keeps a model and the associated moves and monitors. The object is used to run Markov chain Monte Carlo (MCMC) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: 'The MCMC analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The MCMC analysis object is used to run Markov chain Monte Carlo (MCMC) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an mcmc object
    mymcmcObject = mcmc( mymodel, monitors, moves)
    
    # Run a short analysis
    mymcmcObject.burnin( generations = 400, tuningInterval = 100)
    mymcmcObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    mymcmcObject.operatorSummary()
  authors: 'Sebastian Hoehna'
  see_also: 'mcmcmc'
  constructor:
    - usage: 'mcmc(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"}, Natural<any> nruns, String<any> combineTraces {valid options: "sequential"|"mixed"}, Natural<any> ntries, RealPos<any> priorHeat, RealPos<any> likelihoodHeat, RealPos<any> posteriorHeat)'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
        - label: 'nruns'
          description: 'The number of replicate analyses.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'combineTraces'
          description: 'The way how we combine the traces ones the simulation is finished.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'sequential'
          options:
            - 'sequential'
            - 'mixed'
        - label: 'ntries'
          description: 'The number of initialization attempts.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'priorHeat'
          description: 'The power that the prior will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'likelihoodHeat'
          description: 'The power that the likelihood will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
        - label: 'posteriorHeat'
          description: 'The power that the posterior will be raised to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '1'
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'initializeFromTrace'
      return_type: 'void'
      usage: 'initializeFromTrace(ModelTrace[]<any> trace)'
      arguments:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
    - name: 'operatorSummary'
      return_type: 'void'
      usage: 'operatorSummary(Bool<any> currentPeriod)'
      arguments:
        - label: 'currentPeriod'
          description: 'Should the operator summary (number of tries and acceptance, and the acceptance ratio) of only the current period (i.e., after the last tuning) be printed?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations, StoppingRule[]<any> rules, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'rules'
          description: 'The rules when to automatically stop the run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'StoppingRule[]'
          default: 'NULL'
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
    - citation: 'Metropolis N, AW Rosenbluth, MN Rosenbluth, AH Teller, E Teller (1953). Equation of state calculations by fast computing machines. Journal of Chemical Physics, 21:1087-1092.'
      doi:
      url:
    - citation: 'Hastings WK (1970) Monte Carlo sampling methods using Markov chains and their applications. Biometrika, 57:97-109.'
      doi:
      url:
- name: 'mcmcmc'
  title: 'Metropolis-Coupled MCMC analysis object'
  aliases:
  description: 'The Mcmcmc analysis object keeps a model and the associated moves and monitors. The object is used to run Metropolis Couped Markov chain Monte Carlo (Mcmcmc) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  details: 'The Mcmcmc analysis object produced by a call to this function keeps copies of the model and the associated moves and monitors. The Mcmcmc analysis object is used to run Markov chain Monte Carlo (Mcmcmc) simulation on the model, using the provided moves, to obtain a sample of the posterior probability distribution. During the analysis, the monitors are responsible for sampling model parameters of interest.'
  example: |
    # Create a simple model (unclamped)
    a ~ exponential(1)
    mymodel = model(a)
    
    # Create a move vector and a monitor vector
    moves[1] = mvScale(a, lambda=1.0, weight=1.0)
    monitors[1] = mnFile(a,"output/out.log")
    
    # Create an mcmcmc object
    myMcmcmcObject = mcmcmc( mymodel, monitors, moves, nchains=4, deltaHeat=5)
    
    # Run a short analysis
    myMcmcmcObject.burnin( generations = 400, tuningInterval = 100)
    myMcmcmcObject.run( generations = 400)
    
    # print the summary of the operators (now tuned)
    myMcmcmcObject.operatorSummary()
  authors:
    - 'Michael Landis'
    - 'Sebastian Hoehna'
  see_also: 'mcmc'
  constructor:
    - usage: 'mcmcmc(Model<any> model, Monitor[]<any> monitors, Move[]<any> moves, String<any> moveschedule {valid options: "sequential"|"random"|"single"}, Natural<any> nruns, String<any> combineTraces {valid options: "sequential"|"mixed"}, Natural<any> ntries, Natural<any> nchains, Natural<any> swapInterval, RealPos<any> deltaHeat, Probability[]<any> heats, Bool<any> tuneHeat, Probability<any> tuneHeatTarget, String<any> swapMethod {valid options: "neighbor"|"random"|"both"}, Natural<any> swapInterval2, String<any> swapMode {valid options: "single"|"multiple"})'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'moves'
          description: 'The moves used for this analysis.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'moveschedule'
          description: 'The strategy how the moves are used.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'random'
          options:
            - 'sequential'
            - 'random'
            - 'single'
        - label: 'nruns'
          description: 'The number of replicate analyses.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
        - label: 'combineTraces'
          description: 'The way how we combine the traces ones the simulation is finished.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'sequential'
          options:
            - 'sequential'
            - 'mixed'
        - label: 'ntries'
          description: 'The number of initialization attempts.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1000'
          options:
        - label: 'nchains'
          description: 'The number of chains to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '4'
          options:
        - label: 'swapInterval'
          description: 'The interval at which swaps (between neighbor chains if the swapMethod is neighbor or both, or between chains chosen randomly if the swapMethod is random) will be attempted.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10'
          options:
        - label: 'deltaHeat'
          description: 'The delta parameter for the heat function.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.2'
          options:
        - label: 'heats'
          description: 'The heats of chains, starting from the cold chain to hotter chains so the first value must be 1.0. If heats are specified directly then the delta parameter would be ignored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability[]'
          default: 'NULL'
          options:
        - label: 'tuneHeat'
          description: 'Should we tune the heats during burnin?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'tuneHeatTarget'
          description: 'The acceptance probability of adjacent chain swaps targeted by heats auto-tuning.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.23'
          options:
        - label: 'swapMethod'
          description: 'The method used to swap chains.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'neighbor'
          options:
            - 'neighbor'
            - 'random'
            - 'both'
        - label: 'swapInterval2'
          description: 'The interval at which swaps between randomly chosen chains will be attempted (if the swapMethod is specified as both; otherwise it would be the same as swapInterval if not provided).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: 'NULL'
          options:
        - label: 'swapMode'
          description: 'Whether make a single attempt per swap interval or attempt multiple (= nchains-1 or choose(nchains,2) for neighbor or random swaps, respectively) times.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'single'
          options:
            - 'single'
            - 'multiple'
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'initializeFromTrace'
      return_type: 'void'
      usage: 'initializeFromTrace(ModelTrace[]<any> trace)'
      arguments:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
    - name: 'operatorSummary'
      return_type: 'void'
      usage: 'operatorSummary(Bool<any> currentPeriod)'
      arguments:
        - label: 'currentPeriod'
          description: 'Should the operator summary (number of tries and acceptance, and the acceptance ratio) of only the current period (i.e., after the last tuning) be printed?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations, StoppingRule[]<any> rules, Natural<any> tuningInterval, Bool<any> underPrior)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'rules'
          description: 'The rules when to automatically stop the run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'StoppingRule[]'
          default: 'NULL'
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '0'
          options:
        - label: 'underPrior'
          description: 'Should we run this analysis under the prior only?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
  references:
    - citation: 'Geyer,C.J. (1991) Markov chain Monte Carlo maximum likelihood. In Keramidas (ed.), Computing Science and Statistics: Proceedings of the 23rd Symposium on the Interface. Interface Foundation, Fairfax Station, pp. 156–163.'
      doi:
      url:
    - citation: 'Gilks,W.R. and Roberts,G.O. (1996) Strategies for improving MCMC. In Gilks,W.R., Richardson,S. and Spiegelhalter (eds) Markov chain Monte Carlo in Practice. Chapman&Hall, London, 89–114.'
      doi:
      url:
    - citation: 'Altekar, G.; Dwarkadas, S.; Huelsenbeck, J. P. & Ronquist, F. Parallel metropolis coupled Markov chain Monte Carlo for Bayesian phylogenetic inference Bioinformatics, Oxford Univ Press, 2004, 20, 407-415.'
      doi:
      url:
- name: 'model'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'model(RevObject<any> x, RevObject ...)'
      arguments:
        - label: 'x'
          description: 'Any variable that is connected in the model graph.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
        - label:
          description: 'Additional variables.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'RevObject'
          default:
          options:
  methods:
    - name: 'graph'
      return_type: 'void'
      usage: 'graph(String<any> file, Bool<any> verbose, String<any> bg)'
      arguments:
        - label: 'file'
          description: 'The name of the file where to save the model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'verbose'
          description: 'Verbose output?'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Bool'
          default: 'FALSE'
          options:
        - label: 'bg'
          description: 'The background color.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'lavenderblush2'
          options:
  references:
- name: 'pathSampler'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'pathSampler(String<any> filename, String<any> powerColumnName, String<any> likelihoodColumnName, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The filename where the likelihood samples are stored in.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powerColumnName'
          description: 'The name of the column that holds the values of the powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'likelihoodColumnName'
          description: 'The name of the column that holds the likelihood values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The delimiter between columns.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'marginal'
      return_type: 'Real'
      usage: 'marginal()'
      arguments:
  references:
- name: 'posteriorPredictiveAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'posteriorPredictiveAnalysis(MonteCarloAnalysis<any> sampler, String<any> directory)'
      arguments:
        - label: 'sampler'
          description: 'The template Monte Carlo sampler instance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MonteCarloAnalysis'
          default:
          options:
        - label: 'directory'
          description: 'The name of the directory where the simulated data are.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'posteriorPredictiveSimulation'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'posteriorPredictiveSimulation(Model<any> model, String<any> directory, ModelTrace[]<any> trace, AncestralStateTrace[]<any> ancestralStateTrace)'
      arguments:
        - label: 'model'
          description: 'The reference model instance.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'Model'
          default:
          options:
        - label: 'directory'
          description: 'The name of the directory where we store the simulations.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'trace'
          description: 'The sample trace object.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'ModelTrace[]'
          default:
          options:
        - label: 'ancestralStateTrace'
          description: 'The ancestral state trace object. Used only for simulating CDBDP when conditioning on sampled tip states.'
          dag_type: '<any>'
          pass_by: 'const reference'
          value_type: 'AncestralStateTrace[]'
          default: 'NULL'
          options:
  methods:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> thinning)'
      arguments:
        - label: 'thinning'
          description: 'The number of samples to jump over.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  references:
- name: 'powerPosterior'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'powerPosterior(Model<any> model, Move[]<any> moves, Monitor[]<any> monitors, String<any> filename, RealPos[]<any> powers, Natural<any> cats, RealPos<any> alpha, Natural<any> sampleFreq, Natural<any> procPerLikelihood)'
      arguments:
        - label: 'model'
          description: 'The model graph.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Model'
          default:
          options:
        - label: 'moves'
          description: 'The vector moves to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Move[]'
          default:
          options:
        - label: 'monitors'
          description: 'The monitors to call. Do not provide a screen monitor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Monitor[]'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file for the likelihood samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powers'
          description: 'A vector of powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos[]'
          default: 'NULL'
          options:
        - label: 'cats'
          description: 'The number of categories if no powers are specified.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'alpha'
          description: 'The alpha parameter of the beta distribution if no powers are specified.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0.2'
          options:
        - label: 'sampleFreq'
          description: 'The sampling frequency of the likelihood values.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '100'
          options:
        - label: 'procPerLikelihood'
          description: 'Number of processors used to compute the likelihood.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '1'
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The frequency when the moves are tuned (usually between 50 and 1000).'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  references:
- name: 'srGelmanRubin'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srGelmanRubin(RealPos<any> R, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'R'
          description: 'The maximum allowed potential scale reduction factor.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srGeweke'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srGeweke(Probability<any> prob, Probability<any> frac1, Probability<any> frac2, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'prob'
          description: 'The significance level.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.05'
          options:
        - label: 'frac1'
          description: 'The fraction of samples used for the first window.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.1'
          options:
        - label: 'frac2'
          description: 'The fraction of samples used for the second window.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.5'
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srMaxIteration'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srMaxIteration(Natural<any> maxIteration)'
      arguments:
        - label: 'maxIteration'
          description: 'The maximum number of iterations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
  references:
- name: 'srMaxTime'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srMaxTime(RealPos<any> maxTime, String<any> unit {valid options: "seconds"|"minutes"|"hours"})'
      arguments:
        - label: 'maxTime'
          description: 'The maximum time to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'unit'
          description: 'The unit in which we measure the maximum time.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'seconds'
          options:
            - 'seconds'
            - 'minutes'
            - 'hours'
  methods:
  references:
- name: 'srMinESS'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srMinESS(RealPos<any> minEss, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'minEss'
          description: 'The minimum ESS threshold when stopping is allowed.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'srStationarity'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'srStationarity(Probability<any> prob, String<any> filename, Natural<any> frequency, String<any> burninMethod {valid options: "ESS"|"SEM"})'
      arguments:
        - label: 'prob'
          description: 'The significance level.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default:
          options:
        - label: 'filename'
          description: 'The name of the file containing the samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'frequency'
          description: 'The frequency how often to check for convergence.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default: '10000'
          options:
        - label: 'burninMethod'
          description: 'Which type of burnin method to use.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'ESS'
          options:
            - 'ESS'
            - 'SEM'
  methods:
  references:
- name: 'steppingStoneSampler'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'steppingStoneSampler(String<any> filename, String<any> powerColumnName, String<any> likelihoodColumnName, String<any> delimiter)'
      arguments:
        - label: 'filename'
          description: 'The name of the file where the likelhood samples are stored.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'powerColumnName'
          description: 'The name of the column of the powers.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'likelihoodColumnName'
          description: 'The name of the column of the likelihood samples.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'delimiter'
          description: 'The column delimiter.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: ''
          options:
  methods:
    - name: 'marginal'
      return_type: 'Real'
      usage: 'marginal()'
      arguments:
  references:
- name: 'taxon'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'taxon(String<any> taxonName, String<any> speciesName, RealPos<any> age/min, RealPos<any> max)'
      arguments:
        - label: 'taxonName'
          description: 'The name of the taxon.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default:
          options:
        - label: 'speciesName'
          description: 'The name of the species it belongs to.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'String'
          default: 'taxonName'
          options:
        - label: 'age/min'
          description: 'The (minimum) age before the present when this taxon was sampled.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: '0'
          options:
        - label: 'max'
          description: 'The maximum age before the present when this taxon was sampled.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'RealPos'
          default: 'age/min'
          options:
  methods:
    - name: 'getAge'
      return_type: 'String'
      usage: 'getAge()'
      arguments:
    - name: 'getMaxAge'
      return_type: 'String'
      usage: 'getMaxAge()'
      arguments:
    - name: 'getMinAge'
      return_type: 'String'
      usage: 'getMinAge()'
      arguments:
    - name: 'getName'
      return_type: 'String'
      usage: 'getName()'
      arguments:
    - name: 'getSpeciesName'
      return_type: 'String'
      usage: 'getSpeciesName()'
      arguments:
  references:
- name: 'validationAnalysis'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  constructor:
    - usage: 'validationAnalysis(MonteCarloAnalysis<any> sampler, Natural<any> simulations)'
      arguments:
        - label: 'sampler'
          description: 'The template Monte Carlo sampler instance.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'MonteCarloAnalysis'
          default:
          options:
        - label: 'simulations'
          description: 'How many replicate simulations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
  methods:
    - name: 'burnin'
      return_type: 'void'
      usage: 'burnin(Natural<any> generations, Natural<any> tuningInterval)'
      arguments:
        - label: 'generations'
          description: 'The number of generation to run this burnin simulation.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
        - label: 'tuningInterval'
          description: 'The interval when to update the tuning parameters of the moves.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'run'
      return_type: 'void'
      usage: 'run(Natural<any> generations)'
      arguments:
        - label: 'generations'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Natural'
          default:
          options:
    - name: 'summarize'
      return_type: 'void'
      usage: 'summarize(Probability<any> coverageProbability)'
      arguments:
        - label: 'coverageProbability'
          description: 'The number of generations to run.'
          dag_type: '<any>'
          pass_by: 'value'
          value_type: 'Probability'
          default: '0.9'
          options:
  references:
