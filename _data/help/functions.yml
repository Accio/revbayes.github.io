- name: 'Probability'
  return_type: 'Probability'
  usage: 'Probability(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description: 'This Rev function converts between Rev types from Real to Probability.'
  details:
  example: |
    # Create a RealPos
    x <- 12/13
    type(x)
    
    # Convert the RealPos to Probability
    y := Probability(x)
    type(y)
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'VectorMonitors'
  return_type: 'Monitor[]'
  usage: 'VectorMonitors()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'VectorMoves'
  return_type: 'Move[]'
  usage: 'VectorMoves()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: '[]'
  return_type: 'Integer'
  usage: '[](Integer[]<any> v, Natural<any> index)'
  arguments:
    - label: 'v'
      description: 'The vector.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer[]'
      options:
    - label: 'index'
      description: 'The index.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'abs'
  return_type: 'RealPos'
  usage: 'abs(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'A (possibly negative) number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title: 'Absolute value of a number'
  aliases:
  description: 'The ''abs'' function returns the absolute value of a number.'
  details:
  example: |
    # compute the absolute value of a real number
    number <- -3.0
    absoluteValueOfTheNumber <- abs(number)
    if (number + absoluteValueOfTheNumber != 0.0) {
        print("Problem when computing an absolute value.")
    } else {
        print("Correct computation of an absolute value.")
    }
  authors: 'Sebastian Hoehna'
  see_also:
    - 'ceil'
    - 'ceil'
    - 'ceil'
  references:
- name: 'ancestralStateTree'
  return_type: 'Tree'
  usage: 'ancestralStateTree(Tree<any> tree, AncestralStateTrace[]<any> ancestral_state_trace_vector, TraceTree<any> tree_trace, Bool<any> include_start_states, String<any> file, Probability|Integer<any> burnin, String<any> summary_statistic {valid options: "MAP"|"mean"}, String<any> reconstruction {valid options: "conditional"|"joint"|"marginal"}, Integer<any> site, Bool<any> verbose)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize ancestral states over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      options:
    - label: 'ancestral_state_trace_vector'
      description: 'A vector of ancestral state traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      options:
    - label: 'include_start_states'
      description: 'Annotate start states as well as end states for each branch. Only applicable for cladogenetic processes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'file'
      description: 'The name of the file to store the annotated tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'summary_statistic'
      description: 'The statistic used to summarize ancestral states. ''MAP'' displays the 3 states with highest posterior probabilities. ''mean'' displays the mean value and 95% CI.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'MAP'
        - 'MAP'
    - label: 'reconstruction'
      description: '''joint'' and ''conditional'' should only be used to summarize ancestral states sampled from the joint distribution. ''marginal'' can be used for states sampled from the joint or marginal distribution.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'conditional'
        - 'conditional'
        - 'conditional'
    - label: 'site'
      description: 'The character site to be summarized.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'annotateTree'
  return_type: 'Tree'
  usage: 'annotateTree(Tree<any> tree, TraceTree<any> trace, String<any> file, Bool<any> ages, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors)'
  arguments:
    - label: 'tree'
      description: 'The input tree which will be annotated.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      options:
    - label: 'trace'
      description: 'The sample trace.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'ages'
      description: 'Annotate node ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the input topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'append'
  return_type: 'Integer[]'
  usage: 'append(Integer[]<any> v, Integer<any> x)'
  arguments:
    - label: 'v'
      description: 'The vector that we append.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer[]'
      options:
    - label: 'x'
      description: 'The value that we append.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer'
      options:
  title: 'Append a value'
  aliases:
  description: '''append'' adds an element to a vector.'
  details: '''append'' creates a new vector that is the original vector plus the extra element.'
  example: |
    a <- 1:3
    b <- 4
    c := append(a,b)
  authors: 'Sebastian Hoehna'
  see_also: 'rep'
  references:
- name: 'branchScoreDistance'
  return_type: 'RealPos'
  usage: 'branchScoreDistance(Tree<any> tree1, Tree<any> tree2)'
  arguments:
    - label: 'tree1'
      description: 'The first tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'tree2'
      description: 'The second tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'ceil'
  return_type: 'Integer'
  usage: 'ceil(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title: 'Ceiling value of a number'
  aliases:
  description: 'The ''ceil'' function maps the value of a number to the smallest following integer.'
  details:
  example: |
    # compute the ceiling of a real number
    number <- 3.4
    ceiled_number <- ceil(number)
    if (ceiled_number != 4.0) {
        print("Problem when computing a ceiled value.")
    } else {
        print("Correct computation of a ceiled value.")
    }
  authors: 'Sebastian Hoehna'
  see_also:
    - 'abs'
    - 'abs'
    - 'abs'
  references:
- name: 'characterMapTree'
  return_type: 'Tree'
  usage: 'characterMapTree(Tree<any> tree, AncestralStateTrace[]<any> ancestral_state_trace_vector, TraceTree<any> tree_trace, String<any> character_file, String<any> posterior_file, Probability|Integer<any> burnin, String<any> reconstruction {valid options: "conditional"|"joint"|"marginal"}, Integer<any> num_time_slices, Bool<any> verbose)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize the character history over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      options:
    - label: 'ancestral_state_trace_vector'
      description: 'A vector of ancestral state traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      options:
    - label: 'character_file'
      description: 'The name of the file to store the tree annotated with the MAP character history.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'posterior_file'
      description: 'The name of the file to store the tree annotated with the posterior probabilities for the MAP character history.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'reconstruction'
      description: '''joint'' and ''conditional'' should only be used to summarize character maps sampled from the joint distribution. ''marginal'' can be used for character maps sampled from the joint or marginal distribution.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'conditional'
        - 'conditional'
        - 'conditional'
    - label: 'num_time_slices'
      description: 'The number of time slices to discretize the character history. Should be the same as used for the numeric ODE.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'checkNodeOrderConstraints'
  return_type: 'Bool'
  usage: 'checkNodeOrderConstraints(TimeTree<any> tree, RlRelativeNodeAgeConstraints<any> constraints)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'constraints'
      description: 'The constraints on relative node ages that need to be tested on the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RlRelativeNodeAgeConstraints'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'choose'
  return_type: 'Natural'
  usage: 'choose(Natural<any> n, Natural<any> k)'
  arguments:
    - label: 'n'
      description: 'Number of total elements.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'k'
      description: 'Number of chosen elements.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description: 'Rev function to calculate the binomial coefficients.'
  details:
  example: |
    n <- 5
    k <- 2
    x := choose(n, k)
  authors: 'Michael Landis'
  see_also:
  references:
- name: 'clear'
  return_type: 'void'
  usage: 'clear(RevObject ...)'
  arguments:
    - label:
      description: 'Variables to remove.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      options:
  title: 'Clear the current workspace'
  aliases:
  description: 'Clear (e.g., remove) variables and functions from the workspace.'
  details: 'The clear function removes either a given variable or all variables from the workspace. Clearing the workspace is very useful between analysis if you do not want to have old connections between variables hanging around.'
  example: |
    ls()   # check what is in the workspace
    a <- 1
    b := exp(a)
    ls()   # check what is in the workspace
    clear()
    ls()   # check what is in the workspace
    a <- 1
    b := exp(a)
    ls()   # check what is in the workspace
    clear( b )
    ls()   # check what is in the workspace
  authors: 'Sebastian Hoehna'
  see_also: 'exists'
  references:
- name: 'computeWeightedNodeOrderConstraintsScore'
  return_type: 'Real'
  usage: 'computeWeightedNodeOrderConstraintsScore(TimeTree<any> tree, RlRelativeNodeAgeWeightedConstraints<any> constraints, RealPos<any> beta)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'constraints'
      description: 'The constraints on relative node ages that are needed to compute the score of the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RlRelativeNodeAgeWeightedConstraints'
      options:
    - label: 'beta'
      description: 'The beta weight for the constraints.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'concatenate'
  return_type: 'Bool'
  usage: 'concatenate(AbstractHomologousDiscreteCharacterData<any> a, AbstractHomologousDiscreteCharacterData<any> b, AbstractHomologousDiscreteCharacterData ..., String<any> merge {valid options: "union"|"intersection"})'
  arguments:
    - label: 'a'
      description: 'First character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'b'
      description: 'Second character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label:
      description: 'Additional character data objects.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'merge'
      description: 'How to merge differing taxa'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'union'
        - 'union'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'consensusTree'
  return_type: 'Tree'
  usage: 'consensusTree(TraceTree<any> trace, Probability<any> cutoff, String<any> file, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      options:
    - label: 'cutoff'
      description: 'The minimum threshold for clade probabilities.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'file'
      description: 'The name of the file for storing the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
    - 'conTree'
    - 'conTree'
  description: 'Calculates the majority-rule consensus topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the majority-rule consensus tree
    map_tree = consensusTree(trace=tree_trace, cutoff=0.5, file="consensus.tree")
  authors:
    - 'Seraina Klopfstein'
    - 'Seraina Klopfstein'
    - 'Seraina Klopfstein'
    - 'Seraina Klopfstein'
  see_also:
    - 'mapTree'
    - 'mapTree'
    - 'mapTree'
    - 'mapTree'
  references:
- name: 'convertToPhylowood'
  return_type: 'Tree'
  usage: 'convertToPhylowood(String<any> statefile, String<any> treefile, String<any> geofile, String<any> outfile, Probability<any> burnin, String<any> chartype {valid options: "NaturalNumbers"|"Standard"}, String<any> bgtype {valid options: "Range"|"Area"})'
  arguments:
    - label: 'statefile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'treefile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'geofile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'outfile'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'chartype'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'NaturalNumbers'
        - 'NaturalNumbers'
    - label: 'bgtype'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'Range'
        - 'Range'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'diagonalMatrix'
  return_type: 'MatrixRealSymmetric'
  usage: 'diagonalMatrix(Natural<any> n)'
  arguments:
    - label: 'n'
      description: 'The number of rows/columns (dimension).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description: 'Building a identity/diagonal matrix with ''n'' columns and rows.'
  details:
  example:
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'exists'
  return_type: 'Bool'
  usage: 'exists(String<any> name)'
  arguments:
    - label: 'name'
      description: 'The name of the variable we wish to check for existence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title: 'Check whether a variable exists'
  aliases:
  description: 'Determines whether the RevBayes workspace contains a variable named ''name'''
  details: '''exists'' returns ''true'' if the workspace contains a variable whose name matches the String ''name'' and ''false'' otherwise. One use of ''exists'' is to add Move and Monitor objects conditional on the variable ''x'' existing. The function ''ls'' provides a summary for all variable names that ''exists'' would evaluate as ''true''.'
  example: |
    ## Correct usage: does "x" exist?
    x <- 1.0
    exists("x")
    
    ## Incorrect usage: does "1.0" exist?
    exists(x)
  authors: 'Michael Landis'
  see_also: 'clear'
  references:
- name: 'exp'
  return_type: 'RealPos'
  usage: 'exp(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'A number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'floor'
  return_type: 'Integer'
  usage: 'floor(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnAdjacentRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnAdjacentRateModifier(Real<any> gainFactor, Real<any> lossFactor, Natural<any> width, RealPos[][]|Real[][]|MatrixRealSymmetric|MatrixReal<any> matrix, Natural<any> numStates, Natural<any> numChars)'
  arguments:
    - label: 'gainFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_1 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'lossFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_0 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'width'
      description: 'Width of context-dependence window'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'matrix'
      description: 'Weighted character adjacency matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'numStates'
      description: 'Number of states'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnBiogeoDE'
  return_type: 'RateGeneratorSequence'
  usage: 'fnBiogeoDE(RateGenerator<any> gainLossRates, CharacterHistoryRateModifier<any> geoRateMod, Simplex<any> root_frequencies, Natural<any> numAreas, Bool<any> forbidExtinction)'
  arguments:
    - label: 'gainLossRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      options:
    - label: 'geoRateMod'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CharacterHistoryRateModifier'
      options:
    - label: 'root_frequencies'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'numAreas'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'forbidExtinction'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnBlosum62'
  return_type: 'RateGenerator'
  usage: 'fnBlosum62()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnChromosomes'
  return_type: 'RateMatrix'
  usage: 'fnChromosomes(Natural<any> maxChromosomes, RealPos<any> gamma, RealPos<any> delta, RealPos<any> rho, RealPos<any> eta, Real<any> gamma_l, Real<any> delta_l)'
  arguments:
    - label: 'maxChromosomes'
      description: 'Maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'gamma'
      description: 'Rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'delta'
      description: 'Rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'rho'
      description: 'Rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'eta'
      description: 'Rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'gamma_l'
      description: 'Rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'delta_l'
      description: 'Rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnChromosomesCladoEventsBD'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnChromosomesCladoEventsBD(RealPos[]<any> speciation_rates, RealPos[]<any> rate_multipliers, Natural<any> max_chromosomes)'
  arguments:
    - label: 'speciation_rates'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'rate_multipliers'
      description: 'The rate multipliers for hidden rate classes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'max_chromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnChromosomesCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnChromosomesCladoProbs(Simplex<any> eventProbs, Natural<any> maxChromosomes)'
  arguments:
    - label: 'eventProbs'
      description: 'The probabilities of the different event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'maxChromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnChromosomesPloidy'
  return_type: 'RateMatrix'
  usage: 'fnChromosomesPloidy(Natural<any> maxChromosomes, RealPos<any> gamma_d, RealPos<any> delta_d, RealPos<any> rho_d, RealPos<any> eta_d, Real<any> gamma_dl, Real<any> delta_dl, RealPos<any> gamma_p, RealPos<any> delta_p, RealPos<any> rho_p, RealPos<any> eta_p, Real<any> gamma_pl, Real<any> delta_pl, Real<any> beta)'
  arguments:
    - label: 'maxChromosomes'
      description: 'Maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'gamma_d'
      description: 'Diploid rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'delta_d'
      description: 'Diploid rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'rho_d'
      description: 'Diploid rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'eta_d'
      description: 'Disploid rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'gamma_dl'
      description: 'Diploid rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'delta_dl'
      description: 'Diploid rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'gamma_p'
      description: 'Polyploid rate of gain of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'delta_p'
      description: 'Polyploid rate of loss of a single chromosome.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'rho_p'
      description: 'Polyploid rate of polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'eta_p'
      description: 'Polyploid rate of demi-polyploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'gamma_pl'
      description: 'Polyploid rate modifier for chromosome gains.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'delta_pl'
      description: 'Polyploid rate modifier for chromosome losses.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'beta'
      description: 'Rate of rediploidization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnChromosomesPloidyCladoEventsBD'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnChromosomesPloidyCladoEventsBD(RealPos[]<any> speciation_rates, Natural<any> max_chromosomes)'
  arguments:
    - label: 'speciation_rates'
      description: 'The speciation rates for different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'max_chromosomes'
      description: 'The maximum number of chromosomes.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCladeSpecificHierarchicalBranchRate'
  return_type: 'RealPos[]'
  usage: 'fnCladeSpecificHierarchicalBranchRate(TimeTree<any> tree, Clade[]<any> clades, RealPos[]<any> baseRates, RealPos[]<any> cladeRates)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'clades'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Clade[]'
      options:
    - label: 'baseRates'
      description: 'The branch rates without clade multipliers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'cladeRates'
      description: 'The rate multipliers for the clades.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCladogeneticSpeciationRateMatrix'
  return_type: 'CladogeneticSpeciationRateMatrix'
  usage: 'fnCladogeneticSpeciationRateMatrix(Natural[][]<any> cladogenetic_events, RealPos[]<any> speciation_rates, Natural<any> num_states)'
  arguments:
    - label: 'cladogenetic_events'
      description: 'A vector of cladogenetic event types. Each type is in the form [ancestral_state, daughter1_state, daughter2_state].'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      options:
    - label: 'speciation_rates'
      description: 'The speciation rates that correspond to the different cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'num_states'
      description: 'The number of states.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCoala'
  return_type: 'Real[]'
  usage: 'fnCoala(Real[]<any> coordinates, MatrixReal<any> corAnalysis, RealPos[]<any> weights)'
  arguments:
    - label: 'coordinates'
      description: 'A vector of coordinates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'corAnalysis'
      description: 'A correspondence analysis object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'MatrixReal'
      options:
    - label: 'weights'
      description: 'A vector of weight for the coordinates.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors: 'Bastien Boussau'
  see_also:
  references:
    - citation: 'A branch-heterogeneous model of protein evolution for efficient inference of ancestral sequences. Groussin M, Boussau B, Gouy M. Syst Biol. 2013 Jul;62(4):523-38.'
      doi: '10.1093/sysbio/syt016'
      url: 'https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3676677/'
- name: 'fnCodon'
  return_type: 'RateMatrix'
  usage: 'fnCodon(RealPos<any> omega, Simplex<any> codonFrequencies)'
  arguments:
    - label: 'omega'
      description: 'The dN / dS rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'codonFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCodonHKY'
  return_type: 'RateMatrix'
  usage: 'fnCodonHKY(RealPos<any> omega, RealPos<any> kappa, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'omega'
      description: 'The dN / dS rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'kappa'
      description: 'The transition-transversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCovarion'
  return_type: 'RateMatrix'
  usage: 'fnCovarion(RateGenerator[]<any> RateMatrices, RealPos[]<any> RateScalars, RealPos[][]<any> SwitchRates, Bool<any> rescaled)'
  arguments:
    - label: 'RateMatrices'
      description: 'Rate matrices for the characters per state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      options:
    - label: 'RateScalars'
      description: 'Rate multipliers per state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'SwitchRates'
      description: 'Rates between state.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCovarionRateMatrix'
  return_type: 'RateGenerator'
  usage: 'fnCovarionRateMatrix(RateGenerator[]<any> Q, RateMatrix<any> switch_rates, RealPos[]<any> clock_rates, Bool<any> rescaled)'
  arguments:
    - label: 'Q'
      description: 'The rate matrix classes'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      options:
    - label: 'switch_rates'
      description: 'The class-switching rate matrix'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateMatrix'
      options:
    - label: 'clock_rates'
      description: 'The rate multipliers per class'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnCpRev'
  return_type: 'RateGenerator'
  usage: 'fnCpRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDECCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnDECCladoProbs(Simplex<any> eventProbs, Natural<any> numCharacters, Natural<any> maxRangeSize, String<any> probType {valid options: "pattern"|"class"}, Bool<any> widespreadAllopatry, String[]<any> eventTypes, RealPos[][]<constant> connectivityGraph, RealPos[][]<constant> vicarianceGraph)'
  arguments:
    - label: 'eventProbs'
      description: 'The probabilities of the different event types.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'numCharacters'
      description: 'The number of characters.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'maxRangeSize'
      description: 'The maximum range size.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'probType'
      description: 'Assign event weights over classes of patterns or over specific patterns'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'pattern'
        - 'pattern'
    - label: 'widespreadAllopatry'
      description: 'Allopatry may result in both daughter ranges being larger than size 1.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'eventTypes'
      description: 'Vector of cladogenetic event types.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String[]'
      options:
    - label: 'connectivityGraph'
      description: 'Connectivity graph of allowed ranges.'
      dag_type: '<constant>'
      pass_by: 'value'
      value_type: 'RealPos[][]'
      options:
    - label: 'vicarianceGraph'
      description: 'Graph to model vicariance events.'
      dag_type: '<constant>'
      pass_by: 'value'
      value_type: 'RealPos[][]'
      options:
  title:
  aliases: 'fnCladoProbs'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDECRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnDECRateMatrix(RealPos[][]<any> dispersalRates, RealPos[][]<any> extirpationRates, Simplex<any> rangeSize, String<any> nullRange {valid options: "CondSurv"|"Exclude"|"Include"}, Natural<any> maxRangeSize)'
  arguments:
    - label: 'dispersalRates'
      description: 'Matrix of dispersal rates between areas.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'extirpationRates'
      description: 'Matrix of extirpation rates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'rangeSize'
      description: 'Relative proportions of range sizes.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'nullRange'
      description: 'How should DEC handle the null range?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'CondSurv'
        - 'CondSurv'
        - 'CondSurv'
    - label: 'maxRangeSize'
      description: 'Maximum range size.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDECRates'
  return_type: 'RealPos[]'
  usage: 'fnDECRates(RealPos[][]<any> dispersalRates, RealPos[]<any> extinctionRates, Natural<any> maxRangeSize)'
  arguments:
    - label: 'dispersalRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'extinctionRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'maxRangeSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDECRoot'
  return_type: 'Simplex'
  usage: 'fnDECRoot(RealPos[]<any> rootFreqs, Simplex<any> rangeSize)'
  arguments:
    - label: 'rootFreqs'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'rangeSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDayhoff'
  return_type: 'RateGenerator'
  usage: 'fnDayhoff()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDecompVarCovar'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnDecompVarCovar(RealPos[]<any> standardDeviations, MatrixReal<any> correlationCoefficients)'
  arguments:
    - label: 'standardDeviations'
      description: 'A vector of standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'correlationCoefficients'
      description: 'A matrix of correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeBeta'
  return_type: 'Probability[]'
  usage: 'fnDiscretizeBeta(RealPos<any> alpha, RealPos<any> beta, Natural<any> numCats, Bool<any> median)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'median'
      description: 'Should we use the median or mean?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeBetaQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeBetaQuadrature(RealPos<any> alpha, RealPos<any> beta, Integer<any> numCats)'
  arguments:
    - label: 'alpha'
      description: 'The alpha parameter of the beta distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'beta'
      description: 'The beta parameter of the beta distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeDistribution'
  return_type: 'Real[]'
  usage: 'fnDiscretizeDistribution(ContinuousDistribution<any> G0, Integer<any> num_cats)'
  arguments:
    - label: 'G0'
      description: 'The distribution to discretize.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousDistribution'
      options:
    - label: 'num_cats'
      description: 'The number of categories into which this distribution is categorize.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeGamma'
  return_type: 'RealPos[]'
  usage: 'fnDiscretizeGamma(RealPos<any> shape, RealPos<any> rate, Integer<any> numCats, Bool<any> median)'
  arguments:
    - label: 'shape'
      description: 'The shape parameter of the gamma distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'rate'
      description: 'The rate parameter (rate = 1/scale) of the gamma distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'median'
      description: 'Should we use the median or mean?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeGammaQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeGammaQuadrature(RealPos<any> shape, RealPos<any> rate, Integer<any> numCats)'
  arguments:
    - label: 'shape'
      description: 'The shape parameter of the Gamma distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'rate'
      description: 'The rate parameter (rate = 1/scale) of the Gamma distribution'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDiscretizeLognormalQuadrature'
  return_type: 'MatrixRealPos'
  usage: 'fnDiscretizeLognormalQuadrature(Real<any> mean, RealPos<any> sd, Integer<any> numCats)'
  arguments:
    - label: 'mean'
      description: 'The mean (in log-space) of the Lognormal distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'sd'
      description: 'The standard deviation (in log-space) of the Lognormal distribution.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'numCats'
      description: 'The number of categories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDistanceRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnDistanceRateModifier(RealPos[][]<any> distances, Real<any> distancePower, Bool<any> useDistances, Bool<any> useAvailable)'
  arguments:
    - label: 'distances'
      description: 'Matrix of distances'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'distancePower'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'useDistances'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
    - label: 'useAvailable'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDppConcFromMean'
  return_type: 'RealPos'
  usage: 'fnDppConcFromMean(RealPos<any> numCats, Natural<any> numElements)'
  arguments:
    - label: 'numCats'
      description: 'Number of Categories of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      options:
    - label: 'numElements'
      description: 'Total number of elements.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnDppMeanFromConc'
  return_type: 'RealPos'
  usage: 'fnDppMeanFromConc(RealPos<any> concentration, RealPos<any> numElements)'
  arguments:
    - label: 'concentration'
      description: 'The concentration parameter of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      options:
    - label: 'numElements'
      description: 'The number of elements of the DPP.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnEarlyBurst'
  return_type: 'RealPos[]'
  usage: 'fnEarlyBurst(TimeTree<any> tree, RealPos<any> sigma, RealPos<any> lambda)'
  arguments:
    - label: 'tree'
      description: 'The tree which will be re-scaled.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'sigma'
      description: 'The rate of drift.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'lambda'
      description: 'The rate of change through time.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnEpoch'
  return_type: 'RateGenerator'
  usage: 'fnEpoch(RateGenerator[]<any> Q, RealPos[]<any> times, RealPos[]<any> rates)'
  arguments:
    - label: 'Q'
      description: 'The per epoch rate matrices'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator[]'
      options:
    - label: 'times'
      description: 'The times of the epochs.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'rates'
      description: 'The rate multipliers per epoch.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnEpochCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnEpochCladoProbs(CladogeneticProbabilityMatrix[]<any> cladogeneticProbabilities, RealPos[]<any> times)'
  arguments:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probability functions.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CladogeneticProbabilityMatrix[]'
      options:
    - label: 'times'
      description: 'The vector of epoch end ages.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnExtantTree'
  return_type: 'TimeTree'
  usage: 'fnExtantTree(TimeTree<any> tree)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnF81'
  return_type: 'RateMatrix'
  usage: 'fnF81(Simplex<any> baseFrequencies)'
  arguments:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnFreeBinary'
  return_type: 'RateMatrix'
  usage: 'fnFreeBinary(Real[]<any> transition_rates, Bool<any> rescaled)'
  arguments:
    - label: 'transition_rates'
      description: 'The transition rates between the two states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnFreeK'
  return_type: 'RateMatrix'
  usage: 'fnFreeK(RealPos[][]|RealPos[]<any> transition_rates, Bool<any> rescaled, String<any> matrixExponentialMethod {valid options: "scalingAndSquaring"|"scalingAndSquaringPade"|"scalingAndSquaringTaylor"|"uniformization"|"eigen"})'
  arguments:
    - label: 'transition_rates'
      description: 'Transition rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'matrixExponentialMethod'
      description: 'The method used to compute the matrix exponential.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnFreeSymmetricRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnFreeSymmetricRateMatrix(RealPos[]<any> transition_rates, Bool<any> rescaled, String<any> matrixExponentialMethod {valid options: "scalingAndSquaring"|"scalingAndSquaringPade"|"scalingAndSquaringTaylor"|"uniformization"|"eigen"})'
  arguments:
    - label: 'transition_rates'
      description: 'The transition rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'matrixExponentialMethod'
      description: 'The method used to compute the matrix exponential.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
        - 'scalingAndSquaring'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnGTR'
  return_type: 'RateMatrix'
  usage: 'fnGTR(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnGeographicalDistance'
  return_type: 'RealPos'
  usage: 'fnGeographicalDistance(Real<any> lat1, Real<any> lon1, Real<any> lat2, Real<any> lon2)'
  arguments:
    - label: 'lat1'
      description: 'The latitude for the first coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'lon1'
      description: 'The longitude for the first coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'lat2'
      description: 'The latitude for the second coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'lon2'
      description: 'The longitude for the second coordinate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnHKY'
  return_type: 'RateMatrix'
  usage: 'fnHKY(RealPos<any> kappa, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa'
      description: 'The transition-transversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnHiddenStateRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnHiddenStateRateMatrix(RealPos[][]|RealPos[]|RateGenerator<any> observered_transition_rates, RealPos[][]|RealPos[]|RateGenerator<any> hidden_transition_rates, Bool<any> rescaled)'
  arguments:
    - label: 'observered_transition_rates'
      description: 'Transition rates between observed states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'hidden_transition_rates'
      description: 'Transition rates between hidden states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'rescaled'
      description: 'Should the matrix be normalized?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnHostSwitchRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnHostSwitchRateModifier(Tree<any> tree, RealPos[]<any> gainScale)'
  arguments:
    - label: 'tree'
      description: 'Host phylogeny that influences host switch rates.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'gainScale'
      description: 'Scales phylogenetic distance depending on gain type.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnInfiniteSites'
  return_type: 'RateMatrix'
  usage: 'fnInfiniteSites(Natural<any> num_states)'
  arguments:
    - label: 'num_states'
      description: 'The number of states.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnJC'
  return_type: 'RateMatrix'
  usage: 'fnJC(Natural<any> num_states)'
  arguments:
    - label: 'num_states'
      description: 'The number of state or state space.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnJones'
  return_type: 'RateGenerator'
  usage: 'fnJones()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnK80'
  return_type: 'RateMatrix'
  usage: 'fnK80(RealPos<any> kappa)'
  arguments:
    - label: 'kappa'
      description: 'The transition/transversion rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases: 'fnKimura80'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnK81'
  return_type: 'RateMatrix'
  usage: 'fnK81(RealPos<any> kappa1, RealPos<any> kappa2, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa1'
      description: 'The transversion rate from purine to pyrimidine.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'kappa2'
      description: 'The transversion rate from pyrimidine to purine.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases: 'fnKimura81'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnLG'
  return_type: 'RateGenerator'
  usage: 'fnLG()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnLnProbability'
  return_type: 'Real'
  usage: 'fnLnProbability(Real<stochastic> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<stochastic>'
      pass_by: 'reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnMixtureCladoProbs'
  return_type: 'CladogeneticProbabilityMatrix'
  usage: 'fnMixtureCladoProbs(CladogeneticProbabilityMatrix[]<any> cladogeneticProbabilities, Simplex<any> mixtureWeights)'
  arguments:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probability functions.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CladogeneticProbabilityMatrix[]'
      options:
    - label: 'mixtureWeights'
      description: 'The mixture probabilities.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnMtMam'
  return_type: 'RateGenerator'
  usage: 'fnMtMam()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnMtRev'
  return_type: 'RateGenerator'
  usage: 'fnMtRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnNormalizedQuantile'
  return_type: 'Real[]'
  usage: 'fnNormalizedQuantile(Distribution__Real<any> contDistribution, Integer<any> numCategories)'
  arguments:
    - label: 'contDistribution'
      description: 'The distribution which we discretize.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Distribution__Real'
      options:
    - label: 'numCategories'
      description: 'How many discrete categories?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnNumUniqueInVector'
  return_type: 'Natural'
  usage: 'fnNumUniqueInVector(Real[]<any> vector)'
  arguments:
    - label: 'vector'
      description: 'The vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnOrderedRateMatrix'
  return_type: 'RateMatrix'
  usage: 'fnOrderedRateMatrix(Natural<any> maxState, RealPos<any> lambda, RealPos<any> mu)'
  arguments:
    - label: 'maxState'
      description: 'The maximum state for this rate matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'lambda'
      description: 'The rate of gain.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'mu'
      description: 'The rate of loss.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPD'
  return_type: 'RealPos'
  usage: 'fnPD(Tree<any> tree, Clade<any> sample, Bool<any> includeRoot, RealPos[]<any> weights)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'sample'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      options:
    - label: 'includeRoot'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'weights'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RealPos[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPartialToCorr'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnPartialToCorr(MatrixReal<any> partialCorrelations)'
  arguments:
    - label: 'partialCorrelations'
      description: 'A matrix of partial correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPattersonsD'
  return_type: 'Real'
  usage: 'fnPattersonsD(String<any> p1, String<any> p2, String<any> p3, String<any> outgroup, AbstractHomologousDiscreteCharacterData<any> data)'
  arguments:
    - label: 'p1'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'p2'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'p3'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'outgroup'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'data'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPhylogeneticIndependentContrasts'
  return_type: 'Real[]'
  usage: 'fnPhylogeneticIndependentContrasts(TimeTree<any> tree, ContinuousCharacterData<any> data, Natural<any> site, Bool<any> normalized)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousCharacterData'
      options:
    - label: 'site'
      description: 'The site for which we compute the contrasts.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'normalized'
      description: 'If we should normalize the contrasts by their standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases: 'fnPIC'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPhylogeneticIndependentContrastsMultiSample'
  return_type: 'Real[]'
  usage: 'fnPhylogeneticIndependentContrastsMultiSample(TimeTree<any> tree, ContinuousCharacterData<any> data, Natural<any> site, Taxon[]<any> taxa, Bool<any> normalized)'
  arguments:
    - label: 'tree'
      description: 'The tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'ContinuousCharacterData'
      options:
    - label: 'site'
      description: 'The site for which we compute the contrasts.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'taxa'
      description: 'The vector of taxa which have species and individual names.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      options:
    - label: 'normalized'
      description: 'If we should normalize the contrasts by their standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases: 'fnPIC'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPomo'
  return_type: 'RateMatrix'
  usage: 'fnPomo(RateGenerator<any> mutationRates, Real[]<any> fitness, Natural<any> virtualNe)'
  arguments:
    - label: 'mutationRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      options:
    - label: 'fitness'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnPruneTree'
  return_type: 'Tree'
  usage: 'fnPruneTree(Tree<any> tree, Taxon[]|String[]<any> prune/retain, Bool<any> pruneFossils)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'prune/retain'
      description: 'Taxon set to prune/retain in the tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Taxon[]'
      options:
    - label: 'pruneFossils'
      description: 'Prune all fossils from tree?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnRangeEvolutionRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnRangeEvolutionRateModifier(Real<any> gainFactor, Real<any> lossFactor, Real[][]<any> matrix, Natural<any> numChars)'
  arguments:
    - label: 'gainFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_1 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'lossFactor'
      description: 'Multiplicative factor (r'' = r * e^{ n_0 * f }) for characters in context set'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'matrix'
      description: 'Weighted character adjacency matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnRateGeneratorSequence'
  return_type: 'RateGeneratorSequence'
  usage: 'fnRateGeneratorSequence(RateGenerator<any> Q, Natural<any> numChars, CharacterHistoryRateModifier[]<any> rateModifiers)'
  arguments:
    - label: 'Q'
      description: 'The per-character rate generator.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      options:
    - label: 'numChars'
      description: 'The number of characters.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'rateModifiers'
      description: 'The sequence-wide context-dependent rate modifiers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'CharacterHistoryRateModifier[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnReversiblePomo'
  return_type: 'RateMatrix'
  usage: 'fnReversiblePomo(Simplex<any> baseFrequencies, Real[]<any> exchangeRates, Natural<any> virtualNe)'
  arguments:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the 4 DNA states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'exchangeRates'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'virtualNe'
      description: 'The virtual population size'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnRtRev'
  return_type: 'RateGenerator'
  usage: 'fnRtRev()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnSampledCladogenesisRootFrequencies'
  return_type: 'Simplex'
  usage: 'fnSampledCladogenesisRootFrequencies(RateGenerator<any> Q, MatrixReal<deterministic> cladogeneticProbabilities, TimeTree<stochastic> tree, RealPos<any> clock)'
  arguments:
    - label: 'Q'
      description: 'The anagenetic event rate matrix'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      options:
    - label: 'cladogeneticProbabilities'
      description: 'The cladogenetic event probabilities'
      dag_type: '<deterministic>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      options:
    - label: 'tree'
      description: 'The time-tree variable containtain the sampled speciation events'
      dag_type: '<stochastic>'
      pass_by: 'reference'
      value_type: 'TimeTree'
      options:
    - label: 'clock'
      description: 'The anagenetic clock rate'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnSegregatingSites'
  return_type: 'Natural'
  usage: 'fnSegregatingSites(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The alignment for which to compute the number of segregating sites.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnShortestDistance'
  return_type: 'RealPos[][]'
  usage: 'fnShortestDistance(Natural[][]<any> adjacencies, RealPos[][]<any> distances)'
  arguments:
    - label: 'adjacencies'
      description: 'The adjaceny matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      options:
    - label: 'distances'
      description: 'The distance matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnSiteRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnSiteRateModifier(RealPos[][]<any> rateMultipliers, Natural[][]<any> eventClasses, Natural[]<any> siteClasses)'
  arguments:
    - label: 'rateMultipliers'
      description: 'Multiplies character i by rate-multiplier r_i.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[][]'
      options:
    - label: 'eventClasses'
      description: 'Assigns event classes to rate matrix events.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[][]'
      options:
    - label: 'siteClasses'
      description: 'Assigns classes to the sites.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnStateCountRateModifier'
  return_type: 'CharacterHistoryRateModifier'
  usage: 'fnStateCountRateModifier(Real[]<any> stateFactors, Natural<any> numChars)'
  arguments:
    - label: 'stateFactors'
      description: 'Power penalty (bonus) for n-1 states'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'numChars'
      description: 'Number of characters'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnStirling'
  return_type: 'Real'
  usage: 'fnStirling(String<any> kind {valid options: "first"|"lnFirst"|"second"}, Natural<any> n, Natural<any> k)'
  arguments:
    - label: 'kind'
      description: 'The type of the stirling number to compute.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'first'
        - 'first'
        - 'first'
    - label: 'n'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'k'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnStitchTree'
  return_type: 'Tree'
  usage: 'fnStitchTree(Tree<any> backboneTree, TimeTree[]<any> patchClades, Taxon[][]<any> patchTaxa)'
  arguments:
    - label: 'backboneTree'
      description: 'The backbone tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'patchClades'
      description: 'The patch clade variables.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree[]'
      options:
    - label: 'patchTaxa'
      description: 'The taxa per patch clade to be stitched on to the backbone tree. Shares order with patchClades.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Taxon[][]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnT92'
  return_type: 'RateMatrix'
  usage: 'fnT92(RealPos<any> kappa, Probability<any> gc)'
  arguments:
    - label: 'kappa'
      description: 'The transition-tranversion rate ratio.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'gc'
      description: 'The frequency of GC.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTIM'
  return_type: 'RateMatrix'
  usage: 'fnTIM(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTVM'
  return_type: 'RateMatrix'
  usage: 'fnTVM(Simplex<any> exchangeRates, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'exchangeRates'
      description: 'The exchangeability rates between states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTajimasD'
  return_type: 'Real'
  usage: 'fnTajimasD(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or amissing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTajimasPi'
  return_type: 'RealPos'
  usage: 'fnTajimasPi(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> perSite, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data matrix for which to compute the summary.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'perSite'
      description: 'Is the statistic normalized per site?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTrN'
  return_type: 'RateMatrix'
  usage: 'fnTrN(RealPos<any> kappa1, RealPos<any> kappa2, Simplex<any> baseFrequencies)'
  arguments:
    - label: 'kappa1'
      description: 'The first transition rate (A<->G).'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'kappa2'
      description: 'The second transition rate (C<->T).'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'baseFrequencies'
      description: 'The stationary frequencies of the states.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
  title:
  aliases: 'fnTamuraNei'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTreeAssembly'
  return_type: 'Tree'
  usage: 'fnTreeAssembly(Tree<any> topology, RealPos[]<any> brlens)'
  arguments:
    - label: 'topology'
      description: 'The tree topology variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'brlens'
      description: 'The vector of branch lengths.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
  title:
  aliases: 'treeAssembly'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTreePairwiseDistances'
  return_type: 'DistanceMatrix'
  usage: 'fnTreePairwiseDistances(Tree<any> tree)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTreePairwiseNodalDistances'
  return_type: 'DistanceMatrix'
  usage: 'fnTreePairwiseNodalDistances(Tree<any> tree)'
  arguments:
    - label: 'tree'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnTreeScale'
  return_type: 'TimeTree'
  usage: 'fnTreeScale(RealPos<any> scale, TimeTree<any> tree, RealPos|RealPos[]<any> tipAges)'
  arguments:
    - label: 'scale'
      description: 'The multiplicator by which to scale the tree,'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'tree'
      description: 'The tree which will be re-scaled.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'tipAges'
      description: 'A vector of ages for the tips.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnUpperTriangle'
  return_type: 'RealPos[]'
  usage: 'fnUpperTriangle(MatrixReal<any> matrix)'
  arguments:
    - label: 'matrix'
      description: 'A matrix.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'MatrixReal'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnVT'
  return_type: 'RateGenerator'
  usage: 'fnVT()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnVarCovar'
  return_type: 'MatrixRealSymmetric'
  usage: 'fnVarCovar(RealPos[]<any> standardDeviations, Real[]<any> correlationCoefficients)'
  arguments:
    - label: 'standardDeviations'
      description: 'The vector of standard deviations.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'correlationCoefficients'
      description: 'The correlation coefficients.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnWAG'
  return_type: 'RateGenerator'
  usage: 'fnWAG()'
  arguments:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'fnWattersonsTheta'
  return_type: 'RealPos'
  usage: 'fnWattersonsTheta(AbstractHomologousDiscreteCharacterData<any> data, Bool<any> perSite, Bool<any> excludeAmbiguous)'
  arguments:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'perSite'
      description: 'Should we normalize per site?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
    - label: 'excludeAmbiguous'
      description: 'Should we exclude ambiguous or missing characters?'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'formatDiscreteCharacterData'
  return_type: 'NULL'
  usage: 'formatDiscreteCharacterData(AbstractHomologousDiscreteCharacterData<any> data, String<any> format, Natural<any> numStates)'
  arguments:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'format'
      description: 'The data format.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'numStates'
      description: 'The number of states (format=="DEC" only).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'gamma'
  return_type: 'RealPos'
  usage: 'gamma(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'getOption'
  return_type: 'void'
  usage: 'getOption(String<any> key)'
  arguments:
    - label: 'key'
      description: 'The key-identifier for the option.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title: 'Get a global RevBayes option'
  aliases:
  description: 'Get a global option for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example: |
    # compute the absolute value of a real number
    getOption("linewidth")
    
    # let us set the linewidth to a new value
    setOption("linewidth", 200)
    
    # now let's check what the value is
    getOption("linewidth")
  authors: 'Sebastian Hoehna'
  see_also: 'setOption'
  references:
- name: 'getwd'
  return_type: 'String'
  usage: 'getwd()'
  arguments:
  title: 'Get and print the working directory'
  aliases:
  description: 'Get the current working directory which RevBayes uses.'
  details:
  example: |
    # get the current working directory
    getwd()
    
    # let us set a new working directory
    setwd("~/Desktop")
    
    # check the working directory again
    getwd()
  authors: 'Sebastian Hoehna'
  see_also: 'setwd'
  references:
- name: 'help'
  return_type: 'void'
  usage: 'help(String<any> topic)'
  arguments:
    - label: 'topic'
      description: 'Retrieve help for a specific topic.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'String'
      options:
  title: 'Get help with RevBayes'
  aliases:
  description: 'Provides general or specific help.'
  details:
  example: |
    # get general help
    help()
    # get specific help
    help("dnNormal")
  authors:
  see_also:
  references:
- name: 'ifelse'
  return_type: 'Natural'
  usage: 'ifelse(Bool<any> condition, Natural<any> a, Natural<any> b)'
  arguments:
    - label: 'condition'
      description: 'A variable representing the condition of the if-else statement.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
    - label: 'a'
      description: 'The value if the statement is true.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'b'
      description: 'The value if the statement is false.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title: 'If-else statement as a function'
  aliases:
  description: 'If the expression is true, then the function returns the first value, otherwise the second value.'
  details: 'The ifelse function is important when the value of a variable should deterministically change during an analysis depending on other variables. Standard if-else statements are not dynamically re-evaluated.'
  example: |
    a <- 1
    b := ifelse( a == 1, 10, -10 )
    b
    
    a <- 2
    b
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'license'
  return_type: 'void'
  usage: 'license()'
  arguments:
  title: 'Copyright license of RevBayes'
  aliases:
  description: 'Print the copyright license of RevBayes.'
  details:
  example: |
    license()
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'listFiles'
  return_type: 'String[]'
  usage: 'listFiles(String<any> path, Bool<any> allFiles, Bool<any> recursive, Bool<any> includeDirs)'
  arguments:
    - label: 'path'
      description: 'The path in which to list files.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'allFiles'
      description: 'Should special files be returned.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'recursive'
      description: 'Should we search directories recursively.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'includeDirs'
      description: 'Should we re return directory names in recursive search.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'listOptions'
  return_type: 'void'
  usage: 'listOptions()'
  arguments:
  title: 'List global RevBayes options'
  aliases:
  description: 'List all global options for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example:
  authors: 'Will Freyman'
  see_also:
    - 'setOption'
    - 'setOption'
  references:
- name: 'ln'
  return_type: 'Real'
  usage: 'ln(RealPos<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title: 'Natural log function'
  aliases:
  description: 'Returns the natural log of a (positive) value.'
  details:
  example: |
    # create a stochastic node with an exponential distribution
    x ~ dnExponential(1)
    
    # create a determinstic node that takes the natural log of x
    y := ln(x)
    
    # print the values for x and y
    x # x has the stochastic value of 2.940149
    y # y has the determined value of 1.07846
  authors: 'Jordan Koch'
  see_also: 'log'
  references:
- name: 'log'
  return_type: 'Real'
  usage: 'log(RealPos<any> x, RealPos<any> base)'
  arguments:
    - label: 'x'
      description: 'A positive number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'base'
      description: 'The base of the logarithm.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'logistic'
  return_type: 'Probability'
  usage: 'logistic(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'ls'
  return_type: 'void'
  usage: 'ls(Bool<any> all, String<any> filter {valid options: "all"|"utility"|"math"|"distribution"|"function"|"datatype"|"move"|"monitor"|"analysis"|"file"|"summary"|"uncategorized"})'
  arguments:
    - label: 'all'
      description: 'Should we print all variables and functions including provided ones by RevBayes?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'filter'
      description: 'List objects for the provided type.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
        - 'all'
  title: 'List workspace content'
  aliases:
  description: 'Show the content of the workspace.'
  details: 'The list functions shows all the variables in the current workspace. You can also see all the functions available if you use ls(all=TRUE)'
  example: |
    # now we have an empty workspace
    ls()
    # next wee add a variable
    a <- 1
    # and we can see it
    ls()
  authors: 'Sebastian Hoehna'
  see_also:
    - 'clear'
    - 'clear'
  references:
- name: 'mapTree'
  return_type: 'Tree'
  usage: 'mapTree(TraceTree<any> trace, String<any> file, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description: 'Finds the maximum a posteriori (MAP) topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the MAP tree
    map_tree = mapTree(trace=tree_trace, file="map.tree")
  authors:
    - 'Will Freyman'
    - 'Will Freyman'
  see_also:
    - 'consensusTree'
    - 'consensusTree'
    - 'consensusTree'
    - 'consensusTree'
  references:
- name: 'matrix'
  return_type: 'MatrixReal'
  usage: 'matrix(Real[][]<any> x)'
  arguments:
    - label: 'x'
      description: 'x'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'max'
  return_type: 'Real'
  usage: 'max(Real[]|MatrixReal<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector/matrix of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'maximumTree'
  return_type: 'TimeTree'
  usage: 'maximumTree(TimeTree[]<any> geneTrees)'
  arguments:
    - label: 'geneTrees'
      description: 'The vector of trees from which to pick the maximum.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree[]'
      options:
  title: 'Maximum tree function to build a species tree.'
  aliases:
  description: 'Builds the maximum species tree given several ultrametric gene trees.'
  details: 'The maximum species tree is a consistent estimate of the species tree under the multispecies coalescent model, if the gene trees are correct and the effective population size constant along the species tree.'
  example: |
    # We simulate a species tree and gene trees and reconstruct a species tree using maximum tree:
    # Let’s simulate a species tree with 10 taxa, 5 gene trees, 1 alleles per species:
    n_species <- 10
    n_genes <- 5
    n_alleles <- 2
    # we simulate an ultrametric species tree:
    # Species names:
    for (i in 1:n_species) {
            species[i] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
    }
    spTree ~ dnBirthDeath(lambda=0.3, mu=0.2, rootAge=10, rho=1, samplingStrategy="uniform", condition="nTaxa", taxa=species)
    print(spTree)
    # let's pick a constant effective population size of 50:
    popSize <- 50
    # let's simulate gene trees now:
    # taxa names:
    for (g in 1:n_genes) {
      for (i in 1:n_species) {
        for (j in 1:n_alleles) {
            taxons[g][(i-1)*n_alleles+j] <- taxon(taxonName="Species_"+i, speciesName="Species_"+i)
        }
      }
      geneTrees[g] ~ dnMultiSpeciesCoalescent(speciesTree=spTree, Ne=popSize, taxa=taxons[g])
    }
    # Let's compute the maximum tree: 
    recTree <- maximumTree(geneTrees)
    print(recTree)
  authors: 'Bastien Boussau'
  see_also:
  references:
    - citation: 'High-resolution species trees without concatenation. Scott V. Edwards, Liang Liu, and Dennis K. Pearl . PNAS April 3, 2007 vol. 104 no. 14 .'
      doi:
      url: 'http://www.pnas.org/content/104/14/5936.full'
    - citation: 'Maximum tree: a consistent estimator of the species tree. Liu L, Yu L, Pearl DK.  Journal of Mathematical Biology, 2010. Jan;60(1):95-106.'
      doi: 'https://doi.org/10.1007/s00285-009-0260-0'
      url: 'https://link.springer.com/article/10.1007%2Fs00285-009-0260-0'
- name: 'mccTree'
  return_type: 'Tree'
  usage: 'mccTree(TraceTree<any> trace, String<any> file, Bool<any> ccAges, Bool<any> ccp, Bool<any> conditionalAges, Probability<any> hpd, Bool<any> mean, Bool<any> sampledAncestors, Bool<any> positiveBranchLengths)'
  arguments:
    - label: 'trace'
      description: 'The samples of trees from the posterior.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'TraceTree'
      options:
    - label: 'file'
      description: 'The name of the file where to store the tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'ccAges'
      description: 'Annotate conditional clade ages?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'ccp'
      description: 'Annotate conditional clade probabilities?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'conditionalAges'
      description: 'Annotate node ages conditional on the topology?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'hpd'
      description: 'The probability mass of the highest posterior density node age interval.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'mean'
      description: 'Annotate node ages using the mean age instead of the median?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'sampledAncestors'
      description: 'Annotate sampled ancestor probs?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'positiveBranchLengths'
      description: 'Force negative branch lengths to be short but positive?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description: 'Finds the maximum clade credibility (MCC) topology from a trace of trees and summarizes branch lengths.'
  details:
  example: |
    # Read in tree trace
    tree_trace = readTreeTrace("output/my.trees", burnin=0.25)
    
    # Generate the MCC tree
    map_tree = mccTree(trace=tree_trace, file="mcc.tree")
  authors:
    - 'Will Pett'
    - 'Will Pett'
  see_also:
    - 'consensusTree'
    - 'consensusTree'
    - 'consensusTree'
    - 'consensusTree'
  references:
- name: 'mean'
  return_type: 'Real'
  usage: 'mean(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'median'
  return_type: 'Real'
  usage: 'median(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'min'
  return_type: 'Real'
  usage: 'min(Real[]|MatrixReal<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'module'
  return_type: 'void'
  usage: 'module(String<any> file, String<any> namespace, RevObject ...)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of module file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'namespace'
      description: 'Namespace used to rescue variables from overwriting.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label:
      description: 'Additinal variables passed into the module.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'mrcaIndex'
  return_type: 'Natural'
  usage: 'mrcaIndex(TimeTree<any> tree, Clade<any> clade)'
  arguments:
    - label: 'tree'
      description: 'The tree which is used to compute the MRCA.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'clade'
      description: 'The clade for which the MRCA is searched.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'nodeAgeByID'
  return_type: 'RealPos'
  usage: 'nodeAgeByID(TimeTree<any> tree, Natural<any> nodeID, Bool<any> stemAge)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'nodeID'
      description: 'The node index.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'stemAge'
      description: 'Do we want the stem age or crown age?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'normalize'
  return_type: 'RealPos[]'
  usage: 'normalize(RealPos[]<any> x, RealPos<any> sum)'
  arguments:
    - label: 'x'
      description: 'The vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos[]'
      options:
    - label: 'sum'
      description: 'The sum the vector will have after normalization.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'pomoRF'
  return_type: 'Simplex'
  usage: 'pomoRF(Simplex<any> root_base_frequencies, Real<any> root_polymorphism_proportion, RateGenerator<any> mutation_rate_matrix, Natural<any> virtualNe)'
  arguments:
    - label: 'root_base_frequencies'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Simplex'
      options:
    - label: 'root_polymorphism_proportion'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'mutation_rate_matrix'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RateGenerator'
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'pomoStateConvert'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'pomoStateConvert(AbstractHomologousDiscreteCharacterData<any> aln, Natural<any> virtualNe, Taxon[]<any> taxa)'
  arguments:
    - label: 'aln'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'virtualNe'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
    - label: 'taxa'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'posteriorPredictiveProbability'
  return_type: 'Simplex'
  usage: 'posteriorPredictiveProbability(Real[]<any> v, Real<any> x)'
  arguments:
    - label: 'v'
      description: 'The simulated statistics.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'x'
      description: 'The opbserved value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'power'
  return_type: 'RealPos'
  usage: 'power(Real<any> base, Real<any> exponent)'
  arguments:
    - label: 'base'
      description: 'The base.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
    - label: 'exponent'
      description: 'The exponent.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'printSeed'
  return_type: 'NULL'
  usage: 'printSeed()'
  arguments:
  title: 'Print the random number generator seed'
  aliases:
  description: 'Print the seed of the random number generator.'
  details:
  example: |
    printSeed()
    
    # Set the seed to a new value
    seed(12345)
    # Now print the seed again
    printSeed()
  authors: 'Sebastian Hoehna'
  see_also: 'seed'
  references:
- name: 'quantile'
  return_type: 'Real'
  usage: 'quantile(Real[]<any> x, Probability<any> k)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
    - label: 'k'
      description: 'The kth quantile of vector x.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Probability'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'quit'
  return_type: 'void'
  usage: 'quit()'
  arguments:
  title: 'Quit RevBayes'
  aliases: 'q'
  description: 'Terminates the currently running instance of RevBayes.'
  details:
  example: |
    # if you really want to quit
    q()
    # you can always start again later ...
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'range'
  return_type: 'Integer[]'
  usage: 'range(Integer<any> first, Integer<any> last)'
  arguments:
    - label: 'first'
      description: 'Lower value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'last'
      description: 'Upper value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title: 'A range of consecutive integer numbers'
  aliases:
  description: 'Create a sequence of number in the given range (interval).'
  details: 'This function is a simplified version of the sequence function ''seq''. The range function creates a sequence of integer numbers with a step size of 1.'
  example: |
    range(1,20)
    range(20,-20)
    
    # this function is actually the same as the ':'
    20:-20
  authors: 'Sebastian Hoehna'
  see_also:
    - 'seq'
    - 'seq'
  references:
- name: 'readAncestralStateTrace'
  return_type: 'AncestralStateTrace[]'
  usage: 'readAncestralStateTrace(String<any> file, String<any> separator)'
  arguments:
    - label: 'file'
      description: 'The name of the file which holds the ancestral state trace.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'separator'
      description: 'The separater between sampled values.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readAncestralStateTreeTrace'
  return_type: 'TraceTree'
  usage: 'readAncestralStateTreeTrace(String<any> file, String<any> treetype {valid options: "clock"|"non-clock"}, String<any> separator, Probability|Integer<any> burnin)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'treetype'
      description: 'The type of tree.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'clock'
        - 'clock'
    - label: 'separator'
      description: 'The separater/delimiter between values.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readAtlas'
  return_type: 'RlAtlas'
  usage: 'readAtlas(String<any> file)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readBranchLengthTrees'
  return_type: 'BranchLengthTree[]'
  usage: 'readBranchLengthTrees(String<any> file)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readCharacterData'
  return_type: 'AbstractHomologousDiscreteCharacterData[]'
  usage: 'readCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'File or directory names where to find the character data.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should the value be returned as a vector even it is only a single matrix?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readCharacterDataDelimited'
  return_type: 'NaturalNumbers'
  usage: 'readCharacterDataDelimited(String<any> file, String<any> type {valid options: "NaturalNumbers"|"Bitset"|"Standard"|"Continuous"}, String<any> stateLabels, String<any> delimiter, Bool<any> headers)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'type'
      description: 'The type of data.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'NaturalNumbers'
        - 'NaturalNumbers'
        - 'NaturalNumbers'
        - 'NaturalNumbers'
    - label: 'stateLabels'
      description: 'The state labels (for standard states) or max number for NaturalNumbers.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'headers'
      description: 'Has this file a header line?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readContinuousCharacterData'
  return_type: 'ContinuousCharacterData[]'
  usage: 'readContinuousCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'The name of the file or directory for the character data matrices.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should we return this object as a vector even if it is just a single matrix?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readDataDelimitedFile'
  return_type: 'RevObject[][]'
  usage: 'readDataDelimitedFile(String<any> file, Bool<any> header, String<any> delimiter, Bool<any> rownames)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'header'
      description: 'Skip first line?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'rownames'
      description: 'Skip first column?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases: 'readTable'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readDiscreteCharacterData'
  return_type: 'AbstractHomologousDiscreteCharacterData[]'
  usage: 'readDiscreteCharacterData(String<any> file, Bool<any> alwaysReturnAsVector)'
  arguments:
    - label: 'file'
      description: 'The name of the file or directory from which to read in the character data matrix.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'alwaysReturnAsVector'
      description: 'Should we always return the character data matrix as a vector of matrices even if there is only one?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readDistanceMatrix'
  return_type: 'DistanceMatrix'
  usage: 'readDistanceMatrix(String<any> file)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readMatrix'
  return_type: 'MatrixReal'
  usage: 'readMatrix(String<any> file, String<any> delimiter)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readPomoCountFile'
  return_type: 'AbstractHomologousDiscreteCharacterData'
  usage: 'readPomoCountFile(String<any> file, Natural<any> virtualPopulationSize)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'virtualPopulationSize'
      description:
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readRelativeNodeAgeConstraints'
  return_type: 'RlRelativeNodeAgeConstraints'
  usage: 'readRelativeNodeAgeConstraints(String<any> file)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readRelativeNodeAgeWeightedConstraints'
  return_type: 'RlRelativeNodeAgeWeightedConstraints'
  usage: 'readRelativeNodeAgeWeightedConstraints(String<any> file, Real<any> threshold)'
  arguments:
    - label: 'file'
      description: 'Relative or absolute name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'threshold'
      description: 'weight threshold below which constraints are ignored.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readStochasticVariableTrace'
  return_type: 'ModelTrace[]'
  usage: 'readStochasticVariableTrace(String<any> file, String<any> delimiter)'
  arguments:
    - label: 'file'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'delimiter'
      description: 'The delimiter used between the output of variables.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readTaxonData'
  return_type: 'Taxon[]'
  usage: 'readTaxonData(String<any> filename, String<any> delimiter)'
  arguments:
    - label: 'filename'
      description: 'Relative or absolute file name.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'delimiter'
      description: 'Delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readTrace'
  return_type: 'Trace[]'
  usage: 'readTrace(String<any> file, String<any> delimiter, Probability|Integer<any> burnin)'
  arguments:
    - label: 'file'
      description: 'Name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns (e.g., the iteration number and the trees).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readTreeTrace'
  return_type: 'TraceTree'
  usage: 'readTreeTrace(String|String[]<any> file, String<any> treetype {valid options: "clock"|"non-clock"}, Clade<any> outgroup, String<any> separator, Probability|Integer<any> burnin, Natural<any> thinning)'
  arguments:
    - label: 'file'
      description: 'The name of the tree trace file(s).'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'treetype'
      description: 'The type of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'clock'
        - 'clock'
    - label: 'outgroup'
      description: 'The clade (consisting of one or more taxa) used as an outgroup.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Clade'
      options:
    - label: 'separator'
      description: 'The separator/delimiter between values in the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'thinning'
      description: 'The frequency of samples to read, i.e., we will only used every n-th sample where n is defined by this argument.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'readTrees'
  return_type: 'TimeTree[]'
  usage: 'readTrees(String<any> file, String<any> text, String<any> treetype {valid options: "clock"|"non-clock"})'
  arguments:
    - label: 'file'
      description: 'The name of the file containing the trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'text'
      description: 'A string containing one or several newick trees, separated by end of lines.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'treetype'
      description: 'The type of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'clock'
        - 'clock'
  title: 'Function to read in trees.'
  aliases:
  description: 'Reads trees from a file containing trees (Nexus, Phylip or Newick accepted), or from a string containing Newick representations of trees.'
  details: 'Either a file name (with the file argument) or a string (with the text argument) must be provided as argument. If both are provided, trees will be read from both sources.'
  example: |
    trees=readTrees(text="(a,(b,c));\n(d:0.1,(e:0.1,f:0.1):0.1);")
    print(trees)
  authors: 'Bastien Boussau'
  see_also:
    - 'write'
    - 'write'
    - 'write'
    - 'write'
    - 'write'
    - 'write'
    - 'write'
    - 'write'
  references:
- name: 'rep'
  return_type: 'Integer[]'
  usage: 'rep(Integer<any> x, Natural<any> n)'
  arguments:
    - label: 'x'
      description: 'The value that we replicate.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Integer'
      options:
    - label: 'n'
      description: 'How often we replicate the value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title: 'Replicate a value'
  aliases: 'replicate'
  description: '''rep'' creates a vector of ''n'' copies of the value ''x''.'
  details: '''rep'' creates a vector of ''n'' elements, each with value ''x'', preserving the type of ''x'' in the returned vector.'
  example: |
    rep(0.1, 3)
  authors: 'Sebastian Hoehna'
  see_also:
    - 'simplex'
    - 'simplex'
  references:
- name: 'rootedTripletDist'
  return_type: 'RootedTripletDistribution'
  usage: 'rootedTripletDist(Tree<any> geneTrees, String[]<any> speciesNames, Bool<any> keepBranchLengths)'
  arguments:
    - label: 'geneTrees'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'speciesNames'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'String[]'
      options:
    - label: 'keepBranchLengths'
      description:
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'round'
  return_type: 'Integer'
  usage: 'round(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'seed'
  return_type: 'NULL'
  usage: 'seed(Natural<any> x)'
  arguments:
    - label: 'x'
      description: 'The number used to seed the random number generator.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Natural'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'seq'
  return_type: 'Integer[]'
  usage: 'seq(Integer<any> from, Integer<any> to, Integer<any> by)'
  arguments:
    - label: 'from'
      description: 'The first value of the sequence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'to'
      description: 'The last value of the sequence.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
    - label: 'by'
      description: 'The step-size between value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Integer'
      options:
  title: 'Create a sequence values'
  aliases:
  description: 'Create a sequence of values separate by a given step-size.'
  details: 'The ''seq'' function create a sequence of values, starting with the initial value and then adding the step-size to it until the value reaches the ''to''-value.'
  example: |
    seq(-0.5, 10.5, 2)
  authors: 'Sebastian Hoehna'
  see_also: 'rep'
  references:
- name: 'setOption'
  return_type: 'void'
  usage: 'setOption(String<any> key, String<any> value)'
  arguments:
    - label: 'key'
      description: 'The key-identifier for which to set a new value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'value'
      description: 'The new value.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title: 'Set a global RevBayes option'
  aliases:
  description: 'Set a global option for RevBayes.'
  details: 'Options are used to personalize RevBayes and are stored on the local machine. Currently this is rather experimental.'
  example: |
    # compute the absolute value of a real number
    getOption("linewidth")
    
    # let us set the linewidth to a new value
    setOption("linewidth", 200)
    
    # now let's check what the value is
    getOption("linewidth")
  authors: 'Sebastian Hoehna'
  see_also: 'getOption'
  references:
- name: 'setwd'
  return_type: 'void'
  usage: 'setwd(String<any> wd)'
  arguments:
    - label: 'wd'
      description: 'The new working directory.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title: 'Set and print the working directory'
  aliases:
  description: 'Set the current working directory which RevBayes uses.'
  details:
  example: |
    # get the current working directory
    getwd()
    
    # let us set a new working directory
    setwd("~/Desktop")
    
    # check the working directory again
    getwd()
  authors: 'Sebastian Hoehna'
  see_also: 'getwd'
  references:
- name: 'simCompleteTree'
  return_type: 'TimeTree'
  usage: 'simCompleteTree(Taxon[]<any> taxa, RealPos<any> rootAge, RealPos<any> lambda, RealPos<any> mu)'
  arguments:
    - label: 'taxa'
      description: 'The taxon names used for initialization.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Taxon[]'
      options:
    - label: 'rootAge'
      description: 'The root age.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'lambda'
      description: 'The speciation rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'mu'
      description: 'The extinction rate.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'simTree'
  return_type: 'TimeTree'
  usage: 'simTree(Natural<any> num_taxa, String<any> type {valid options: "balanced"|"caterpillar"})'
  arguments:
    - label: 'num_taxa'
      description: 'How many taxa this tree has.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Natural'
      options:
    - label: 'type'
      description: 'The type of the shape of the topology.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'balanced'
        - 'balanced'
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'simplex'
  return_type: 'Simplex'
  usage: 'simplex(RealPos<any> x1, RealPos<any> x2, RealPos ...)'
  arguments:
    - label: 'x1'
      description: 'first value'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label: 'x2'
      description: 'second value'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
    - label:
      description: 'additional values'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'sinh'
  return_type: 'Real'
  usage: 'sinh(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'sort'
  return_type: 'Real[]'
  usage: 'sort(Real[]<any> x, Bool<any> ascending)'
  arguments:
    - label: 'x'
      description: 'The vector to be sorted.'
      dag_type: '<any>'
      pass_by: 'reference'
      value_type: 'Real[]'
      options:
    - label: 'ascending'
      description: 'Sort in ascending order?.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'source'
  return_type: 'void'
  usage: 'source(String<any> file, Bool<any> echo.on)'
  arguments:
    - label: 'file'
      description: 'The name of the file to read-in.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'echo.on'
      description: 'Should we print the commands from the file on the screen?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'sqrt'
  return_type: 'RealPos'
  usage: 'sqrt(RealPos<any> x)'
  arguments:
    - label: 'x'
      description: 'A number.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RealPos'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'stdev'
  return_type: 'Real'
  usage: 'stdev(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'The vector of samples.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'structure'
  return_type: 'void'
  usage: 'structure(RevObject<any> x, Bool<any> verbose)'
  arguments:
    - label: 'x'
      description: 'The variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      options:
    - label: 'verbose'
      description: 'Do you want all the information?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title: 'The structure of a variable'
  aliases: 'str'
  description: 'Shows all the information about a given variable.'
  details:
  example: |
    # create a variable
    a <- 1
    b := exp(a)
    # now create a deterministic variable which will be a child of 'b'
    c := ln(b)
    # now create a constant variable which will not be a child of 'b'
    d <- ln(b)
    
    str(b)
  authors: 'Sebastian Hoehna'
  see_also: 'type'
  references:
- name: 'sum'
  return_type: 'Real'
  usage: 'sum(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of numbers.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'summarizeCharacterMaps'
  return_type: 'Tree'
  usage: 'summarizeCharacterMaps(Tree<any> tree, AncestralStateTrace[]<any> character_map_trace_vector, TraceTree<any> tree_trace, String<any> file, Probability|Integer<any> burnin, String<any> separator, Bool<any> verbose)'
  arguments:
    - label: 'tree'
      description: 'The input tree to summarize ancestral states over.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Tree'
      options:
    - label: 'character_map_trace_vector'
      description: 'A vector of stochastic character map traces.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AncestralStateTrace[]'
      options:
    - label: 'tree_trace'
      description: 'A trace of tree samples.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TraceTree'
      options:
    - label: 'file'
      description: 'The name of the file to store the summarized character histories.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
    - label: 'separator'
      description: 'The delimiter between variables. 	 by default.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'verbose'
      description: 'Printing verbose output'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'symmetricDifference'
  return_type: 'RealPos'
  usage: 'symmetricDifference(Tree<any> tree1, Tree<any> tree2)'
  arguments:
    - label: 'tree1'
      description: 'The first tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
    - label: 'tree2'
      description: 'The second tree.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Tree'
      options:
  title:
  aliases: 'symDiff'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'system'
  return_type: 'void'
  usage: 'system(String<any> command)'
  arguments:
    - label: 'command'
      description: 'The system command to execute.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title: 'Execute a system command.'
  aliases:
  description: 'Run a system command.'
  details: 'This function will delegate the command to the system. In that way, the function works as an interface to the shell.'
  example: |
    # We can execute any command just as if you are using a terminal
    system("ls")
    system("pwd")
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'tanh'
  return_type: 'Real'
  usage: 'tanh(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'time'
  return_type: 'NULL'
  usage: 'time(String<any> option {valid options: "year"|"day"|"seconds"|"milliseconds"|"fromBeginning"})'
  arguments:
    - label: 'option'
      description: 'The format of the time.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
        - 'year'
        - 'year'
        - 'year'
        - 'year'
        - 'year'
  title: 'Get the time information'
  aliases:
  description: 'Get the current system time in milliseconds.'
  details:
  example: |
    time()
    
    # Wait a little bit
    sum = 0
    for (i in 1:10000) sum += i
    # Now print the time again
    time()
  authors: 'Sebastian Hoehna'
  see_also:
  references:
- name: 'tmrca'
  return_type: 'RealPos'
  usage: 'tmrca(TimeTree<any> tree, Clade<any> clade, Bool<any> stemAge)'
  arguments:
    - label: 'tree'
      description: 'The tree variable.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'TimeTree'
      options:
    - label: 'clade'
      description: 'The clade.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Clade'
      options:
    - label: 'stemAge'
      description: 'Do we want the stem age or crown age?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'treeTrace'
  return_type: 'TraceTree'
  usage: 'treeTrace(TimeTree[]|BranchLengthTree[]|Tree[]<any> trees, Probability|Integer<any> burnin)'
  arguments:
    - label: 'trees'
      description: 'Vector of trees.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'TimeTree[]'
      options:
    - label: 'burnin'
      description: 'The fraction/number of samples to discard as burnin.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Probability'
      options:
  title:
  aliases:
  description: 'Creates a tree trace object from a vector of trees.'
  details:
  example: |
    # Read in a vector of trees
    trees = readTrees("trees.nex")
    
    # Create a tree trace
    tree_trace = treeTrace(trees, burnin=0.25)
    
    # Create a distribution of trees from the tree trace
    tree ~ dnEmpiricalTree(tree_trace)
    
    # Add an MCMC move
    moves[1] = mvEmpiricalTree(tree)
  authors: 'Will Freyman'
  see_also:
    - 'mvEmpiricalTree'
    - 'mvEmpiricalTree'
    - 'mvEmpiricalTree'
    - 'mvEmpiricalTree'
  references:
- name: 'trunc'
  return_type: 'Integer'
  usage: 'trunc(Real<any> x)'
  arguments:
    - label: 'x'
      description: 'The value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'type'
  return_type: 'String'
  usage: 'type(RevObject<any> x)'
  arguments:
    - label: 'x'
      description: 'A variable.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RevObject'
      options:
  title: 'The value type of a variable'
  aliases:
  description: 'The value type of a variable.'
  details:
  example: |
    a <- 2
    type(a)
    
    b <- 2.0
    type(b)
  authors: 'Sebastian Hoehna'
  see_also: 'structure'
  references:
- name: 'v'
  return_type: 'Integer[]'
  usage: 'v(Integer<any> , Integer ...)'
  arguments:
    - label:
      description: 'First value.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      options:
    - label:
      description: 'More values ...'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Integer'
      options:
  title: 'Create a vector'
  aliases:
  description: '''v'' creates a vector of the elements ''...'''
  details: '''v'' creates a vector of the elements ''...'', which are objects of a common base type. Vector elements may themselves be vectors.'
  example: |
    # create a vector, Natural[]
    x <- v(1,2,3)
    x <- x + 1
    x
    
    y <- v(2,4,6)
    # create a vector of Natural[][]
    z <- v(x,y)
    z
    z[0]
  authors: 'Michael Landis'
  see_also:
    - 'simplex'
    - 'simplex'
  references:
- name: 'var'
  return_type: 'RealPos'
  usage: 'var(Real[]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of values.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'vectorFlatten'
  return_type: 'RealPos[]'
  usage: 'vectorFlatten(Real[][]<any> x)'
  arguments:
    - label: 'x'
      description: 'A vector of a vector.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'Real[][]'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'write'
  return_type: 'NULL'
  usage: 'write(RevObject<any> , RevObject ..., String<any> filename, Bool<any> append, String<any> separator)'
  arguments:
    - label:
      description: 'A variable to write.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'RevObject'
      options:
    - label:
      description: 'Additional variables to write.'
      dag_type: '<any>'
      pass_by: 'const reference'
      value_type: 'RevObject'
      options:
    - label: 'filename'
      description: 'Writing to this file, or to the screen if name is empty.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'append'
      description: 'Append or overwrite existing file?'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'Bool'
      options:
    - label: 'separator'
      description: 'How to separate values between variables.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases: 'print'
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'writeCharacterDataDelimited'
  return_type: 'NULL'
  usage: 'writeCharacterDataDelimited(String<any> filename, AbstractHomologousDiscreteCharacterData|ContinuousCharacterData<any> data, String<any> delimiter)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
    - label: 'delimiter'
      description: 'The delimiter between columns.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'writeFasta'
  return_type: 'NULL'
  usage: 'writeFasta(String<any> filename, AbstractHomologousDiscreteCharacterData<any> data)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'data'
      description: 'The character data object.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
- name: 'writeNexus'
  return_type: 'NULL'
  usage: 'writeNexus(String<any> filename, AbstractHomologousDiscreteCharacterData|ContinuousCharacterData|Tree|Tree[]|TimeTree[]<any> data)'
  arguments:
    - label: 'filename'
      description: 'The name of the file.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'String'
      options:
    - label: 'data'
      description: 'The character data matrix to print.'
      dag_type: '<any>'
      pass_by: 'value'
      value_type: 'AbstractHomologousDiscreteCharacterData'
      options:
  title:
  aliases:
  description:
  details:
  example:
  authors:
  see_also:
  references:
